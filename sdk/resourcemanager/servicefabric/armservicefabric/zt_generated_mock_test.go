//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armservicefabric_test

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"os"
	"testing"

	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/servicefabric/armservicefabric"
	"golang.org/x/net/http2"
)

var (
	ctx      context.Context
	options  arm.ClientOptions
	cred     azcore.TokenCredential
	err      error
	mockHost string
)

func TestClusters_Get(t *testing.T) {
	// From example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ClusterGetOperation_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a cluster"},
	})
	client, err := armservicefabric.NewClustersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Get(ctx,
		"resRg",
		"myCluster",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ClusterGetOperation_example.json: %v", err)
	}
	// Response check
	exampleRes := armservicefabric.Cluster{
		Name:     to.Ptr("myCluster"),
		Type:     to.Ptr("Microsoft.ServiceFabric/clusters"),
		Etag:     to.Ptr("W/\"636462502169240745\""),
		ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.ServiceFabric/clusters/myCluster"),
		Location: to.Ptr("eastus"),
		Tags:     map[string]*string{},
		Properties: &armservicefabric.ClusterProperties{
			AddOnFeatures: []*armservicefabric.AddOnFeatures{
				to.Ptr(armservicefabric.AddOnFeaturesRepairManager),
				to.Ptr(armservicefabric.AddOnFeaturesDNSService),
				to.Ptr(armservicefabric.AddOnFeaturesBackupRestoreService),
				to.Ptr(armservicefabric.AddOnFeaturesResourceMonitorService)},
			AvailableClusterVersions: []*armservicefabric.ClusterVersionDetails{
				{
					CodeVersion:      to.Ptr("6.1.480.9494"),
					Environment:      to.Ptr(armservicefabric.ClusterEnvironmentWindows),
					SupportExpiryUTC: to.Ptr("2018-06-15T23:59:59.9999999"),
				}},
			AzureActiveDirectory: &armservicefabric.AzureActiveDirectory{
				ClientApplication:  to.Ptr("d151ad89-4bce-4ae8-b3d1-1dc79679fa75"),
				ClusterApplication: to.Ptr("5886372e-7bf4-4878-a497-8098aba608ae"),
				TenantID:           to.Ptr("6abcc6a0-8666-43f1-87b8-172cf86a9f9c"),
			},
			CertificateCommonNames: &armservicefabric.ServerCertificateCommonNames{
				CommonNames: []*armservicefabric.ServerCertificateCommonName{
					{
						CertificateCommonName:       to.Ptr("abc.com"),
						CertificateIssuerThumbprint: to.Ptr("12599211F8F14C90AFA9532AD79A6F2CA1C00622"),
					}},
				X509StoreName: to.Ptr(armservicefabric.StoreNameMy),
			},
			ClientCertificateCommonNames: []*armservicefabric.ClientCertificateCommonName{
				{
					CertificateCommonName:       to.Ptr("abc.com"),
					CertificateIssuerThumbprint: to.Ptr("5F3660C715EBBDA31DB1FFDCF508302348DE8E7A"),
					IsAdmin:                     to.Ptr(true),
				}},
			ClientCertificateThumbprints: []*armservicefabric.ClientCertificateThumbprint{
				{
					CertificateThumbprint: to.Ptr("5F3660C715EBBDA31DB1FFDCF508302348DE8E7A"),
					IsAdmin:               to.Ptr(true),
				}},
			ClusterCodeVersion: to.Ptr("6.1.480.9494"),
			ClusterEndpoint:    to.Ptr("https://eastus.servicefabric.azure.com"),
			ClusterID:          to.Ptr("92584666-9889-4ae8-8d02-91902923d37f"),
			ClusterState:       to.Ptr(armservicefabric.ClusterStateWaitingForNodes),
			DiagnosticsStorageAccountConfig: &armservicefabric.DiagnosticsStorageAccountConfig{
				BlobEndpoint:            to.Ptr("https://diag.blob.core.windows.net/"),
				ProtectedAccountKeyName: to.Ptr("StorageAccountKey1"),
				QueueEndpoint:           to.Ptr("https://diag.queue.core.windows.net/"),
				StorageAccountName:      to.Ptr("diag"),
				TableEndpoint:           to.Ptr("https://diag.table.core.windows.net/"),
			},
			FabricSettings: []*armservicefabric.SettingsSectionDescription{
				{
					Name: to.Ptr("UpgradeService"),
					Parameters: []*armservicefabric.SettingsParameterDescription{
						{
							Name:  to.Ptr("AppPollIntervalInSeconds"),
							Value: to.Ptr("60"),
						}},
				}},
			ManagementEndpoint: to.Ptr("https://myCluster.eastus.cloudapp.azure.com:19080"),
			NodeTypes: []*armservicefabric.NodeTypeDescription{
				{
					Name: to.Ptr("nt1vm"),
					ApplicationPorts: &armservicefabric.EndpointRangeDescription{
						EndPort:   to.Ptr[int32](30000),
						StartPort: to.Ptr[int32](20000),
					},
					ClientConnectionEndpointPort: to.Ptr[int32](19000),
					DurabilityLevel:              to.Ptr(armservicefabric.DurabilityLevelBronze),
					EphemeralPorts: &armservicefabric.EndpointRangeDescription{
						EndPort:   to.Ptr[int32](64000),
						StartPort: to.Ptr[int32](49000),
					},
					HTTPGatewayEndpointPort: to.Ptr[int32](19007),
					IsPrimary:               to.Ptr(true),
					VMInstanceCount:         to.Ptr[int32](5),
				}},
			ProvisioningState: to.Ptr(armservicefabric.ProvisioningStateSucceeded),
			ReliabilityLevel:  to.Ptr(armservicefabric.ReliabilityLevelSilver),
			ReverseProxyCertificateCommonNames: &armservicefabric.ServerCertificateCommonNames{
				CommonNames: []*armservicefabric.ServerCertificateCommonName{
					{
						CertificateCommonName:       to.Ptr("abc.com"),
						CertificateIssuerThumbprint: to.Ptr("12599211F8F14C90AFA9532AD79A6F2CA1C00622"),
					}},
				X509StoreName: to.Ptr(armservicefabric.StoreNameMy),
			},
			UpgradeDescription: &armservicefabric.ClusterUpgradePolicy{
				DeltaHealthPolicy: &armservicefabric.ClusterUpgradeDeltaHealthPolicy{
					ApplicationDeltaHealthPolicies: map[string]*armservicefabric.ApplicationDeltaHealthPolicy{
						"fabric:/myApp1": {
							DefaultServiceTypeDeltaHealthPolicy: &armservicefabric.ServiceTypeDeltaHealthPolicy{
								MaxPercentDeltaUnhealthyServices: to.Ptr[int32](0),
							},
							ServiceTypeDeltaHealthPolicies: map[string]*armservicefabric.ServiceTypeDeltaHealthPolicy{
								"myServiceType1": {
									MaxPercentDeltaUnhealthyServices: to.Ptr[int32](0),
								},
							},
						},
					},
					MaxPercentDeltaUnhealthyApplications:       to.Ptr[int32](0),
					MaxPercentDeltaUnhealthyNodes:              to.Ptr[int32](0),
					MaxPercentUpgradeDomainDeltaUnhealthyNodes: to.Ptr[int32](0),
				},
				ForceRestart:              to.Ptr(false),
				HealthCheckRetryTimeout:   to.Ptr("00:05:00"),
				HealthCheckStableDuration: to.Ptr("00:00:30"),
				HealthCheckWaitDuration:   to.Ptr("00:00:30"),
				HealthPolicy: &armservicefabric.ClusterHealthPolicy{
					ApplicationHealthPolicies: map[string]*armservicefabric.ApplicationHealthPolicy{
						"fabric:/myApp1": {
							DefaultServiceTypeHealthPolicy: &armservicefabric.ServiceTypeHealthPolicy{
								MaxPercentUnhealthyServices: to.Ptr[int32](0),
							},
							ServiceTypeHealthPolicies: map[string]*armservicefabric.ServiceTypeHealthPolicy{
								"myServiceType1": {
									MaxPercentUnhealthyServices: to.Ptr[int32](100),
								},
							},
						},
					},
					MaxPercentUnhealthyApplications: to.Ptr[int32](0),
					MaxPercentUnhealthyNodes:        to.Ptr[int32](0),
				},
				UpgradeDomainTimeout:          to.Ptr("00:15:00"),
				UpgradeReplicaSetCheckTimeout: to.Ptr("00:10:00"),
				UpgradeTimeout:                to.Ptr("01:00:00"),
			},
			UpgradeMode: to.Ptr(armservicefabric.UpgradeModeManual),
			VMImage:     to.Ptr("Windows"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Cluster) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Cluster)
		t.Fatalf("Mock response is not equal to example response for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ClusterGetOperation_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestClusters_CreateOrUpdate(t *testing.T) {
	// From example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ClusterPutOperation_example_max.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Put a cluster with maximum parameters"},
	})
	client, err := armservicefabric.NewClustersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resRg",
		"myCluster",
		armservicefabric.Cluster{
			Location: to.Ptr("eastus"),
			Tags:     map[string]*string{},
			Properties: &armservicefabric.ClusterProperties{
				AddOnFeatures: []*armservicefabric.AddOnFeatures{
					to.Ptr(armservicefabric.AddOnFeaturesRepairManager),
					to.Ptr(armservicefabric.AddOnFeaturesDNSService),
					to.Ptr(armservicefabric.AddOnFeaturesBackupRestoreService),
					to.Ptr(armservicefabric.AddOnFeaturesResourceMonitorService)},
				ApplicationTypeVersionsCleanupPolicy: &armservicefabric.ApplicationTypeVersionsCleanupPolicy{
					MaxUnusedVersionsToKeep: to.Ptr[int64](2),
				},
				AzureActiveDirectory: &armservicefabric.AzureActiveDirectory{
					ClientApplication:  to.Ptr("d151ad89-4bce-4ae8-b3d1-1dc79679fa75"),
					ClusterApplication: to.Ptr("5886372e-7bf4-4878-a497-8098aba608ae"),
					TenantID:           to.Ptr("6abcc6a0-8666-43f1-87b8-172cf86a9f9c"),
				},
				CertificateCommonNames: &armservicefabric.ServerCertificateCommonNames{
					CommonNames: []*armservicefabric.ServerCertificateCommonName{
						{
							CertificateCommonName:       to.Ptr("abc.com"),
							CertificateIssuerThumbprint: to.Ptr("12599211F8F14C90AFA9532AD79A6F2CA1C00622"),
						}},
					X509StoreName: to.Ptr(armservicefabric.StoreNameMy),
				},
				ClientCertificateCommonNames: []*armservicefabric.ClientCertificateCommonName{
					{
						CertificateCommonName:       to.Ptr("abc.com"),
						CertificateIssuerThumbprint: to.Ptr("5F3660C715EBBDA31DB1FFDCF508302348DE8E7A"),
						IsAdmin:                     to.Ptr(true),
					}},
				ClientCertificateThumbprints: []*armservicefabric.ClientCertificateThumbprint{
					{
						CertificateThumbprint: to.Ptr("5F3660C715EBBDA31DB1FFDCF508302348DE8E7A"),
						IsAdmin:               to.Ptr(true),
					}},
				ClusterCodeVersion: to.Ptr("7.0.470.9590"),
				DiagnosticsStorageAccountConfig: &armservicefabric.DiagnosticsStorageAccountConfig{
					BlobEndpoint:            to.Ptr("https://diag.blob.core.windows.net/"),
					ProtectedAccountKeyName: to.Ptr("StorageAccountKey1"),
					QueueEndpoint:           to.Ptr("https://diag.queue.core.windows.net/"),
					StorageAccountName:      to.Ptr("diag"),
					TableEndpoint:           to.Ptr("https://diag.table.core.windows.net/"),
				},
				EventStoreServiceEnabled: to.Ptr(true),
				FabricSettings: []*armservicefabric.SettingsSectionDescription{
					{
						Name: to.Ptr("UpgradeService"),
						Parameters: []*armservicefabric.SettingsParameterDescription{
							{
								Name:  to.Ptr("AppPollIntervalInSeconds"),
								Value: to.Ptr("60"),
							}},
					}},
				InfrastructureServiceManager: to.Ptr(true),
				ManagementEndpoint:           to.Ptr("https://myCluster.eastus.cloudapp.azure.com:19080"),
				NodeTypes: []*armservicefabric.NodeTypeDescription{
					{
						Name: to.Ptr("nt1vm"),
						ApplicationPorts: &armservicefabric.EndpointRangeDescription{
							EndPort:   to.Ptr[int32](30000),
							StartPort: to.Ptr[int32](20000),
						},
						ClientConnectionEndpointPort: to.Ptr[int32](19000),
						DurabilityLevel:              to.Ptr(armservicefabric.DurabilityLevelSilver),
						EphemeralPorts: &armservicefabric.EndpointRangeDescription{
							EndPort:   to.Ptr[int32](64000),
							StartPort: to.Ptr[int32](49000),
						},
						HTTPGatewayEndpointPort:   to.Ptr[int32](19007),
						IsPrimary:                 to.Ptr(true),
						IsStateless:               to.Ptr(false),
						MultipleAvailabilityZones: to.Ptr(true),
						VMInstanceCount:           to.Ptr[int32](5),
					}},
				Notifications: []*armservicefabric.Notification{
					{
						IsEnabled:            to.Ptr(true),
						NotificationCategory: to.Ptr(armservicefabric.NotificationCategoryWaveProgress),
						NotificationLevel:    to.Ptr(armservicefabric.NotificationLevelCritical),
						NotificationTargets: []*armservicefabric.NotificationTarget{
							{
								NotificationChannel: to.Ptr(armservicefabric.NotificationChannelEmailUser),
								Receivers: []*string{
									to.Ptr("****@microsoft.com"),
									to.Ptr("****@microsoft.com")},
							},
							{
								NotificationChannel: to.Ptr(armservicefabric.NotificationChannelEmailSubscription),
								Receivers: []*string{
									to.Ptr("Owner"),
									to.Ptr("AccountAdmin")},
							}},
					},
					{
						IsEnabled:            to.Ptr(true),
						NotificationCategory: to.Ptr(armservicefabric.NotificationCategoryWaveProgress),
						NotificationLevel:    to.Ptr(armservicefabric.NotificationLevelAll),
						NotificationTargets: []*armservicefabric.NotificationTarget{
							{
								NotificationChannel: to.Ptr(armservicefabric.NotificationChannelEmailUser),
								Receivers: []*string{
									to.Ptr("****@microsoft.com"),
									to.Ptr("****@microsoft.com")},
							},
							{
								NotificationChannel: to.Ptr(armservicefabric.NotificationChannelEmailSubscription),
								Receivers: []*string{
									to.Ptr("Owner"),
									to.Ptr("AccountAdmin")},
							}},
					}},
				ReliabilityLevel: to.Ptr(armservicefabric.ReliabilityLevelPlatinum),
				ReverseProxyCertificateCommonNames: &armservicefabric.ServerCertificateCommonNames{
					CommonNames: []*armservicefabric.ServerCertificateCommonName{
						{
							CertificateCommonName:       to.Ptr("abc.com"),
							CertificateIssuerThumbprint: to.Ptr("12599211F8F14C90AFA9532AD79A6F2CA1C00622"),
						}},
					X509StoreName: to.Ptr(armservicefabric.StoreNameMy),
				},
				SfZonalUpgradeMode: to.Ptr(armservicefabric.SfZonalUpgradeModeHierarchical),
				UpgradeDescription: &armservicefabric.ClusterUpgradePolicy{
					DeltaHealthPolicy: &armservicefabric.ClusterUpgradeDeltaHealthPolicy{
						ApplicationDeltaHealthPolicies: map[string]*armservicefabric.ApplicationDeltaHealthPolicy{
							"fabric:/myApp1": {
								DefaultServiceTypeDeltaHealthPolicy: &armservicefabric.ServiceTypeDeltaHealthPolicy{
									MaxPercentDeltaUnhealthyServices: to.Ptr[int32](0),
								},
								ServiceTypeDeltaHealthPolicies: map[string]*armservicefabric.ServiceTypeDeltaHealthPolicy{
									"myServiceType1": {
										MaxPercentDeltaUnhealthyServices: to.Ptr[int32](0),
									},
								},
							},
						},
						MaxPercentDeltaUnhealthyApplications:       to.Ptr[int32](0),
						MaxPercentDeltaUnhealthyNodes:              to.Ptr[int32](0),
						MaxPercentUpgradeDomainDeltaUnhealthyNodes: to.Ptr[int32](0),
					},
					ForceRestart:              to.Ptr(false),
					HealthCheckRetryTimeout:   to.Ptr("00:05:00"),
					HealthCheckStableDuration: to.Ptr("00:00:30"),
					HealthCheckWaitDuration:   to.Ptr("00:00:30"),
					HealthPolicy: &armservicefabric.ClusterHealthPolicy{
						ApplicationHealthPolicies: map[string]*armservicefabric.ApplicationHealthPolicy{
							"fabric:/myApp1": {
								DefaultServiceTypeHealthPolicy: &armservicefabric.ServiceTypeHealthPolicy{
									MaxPercentUnhealthyServices: to.Ptr[int32](0),
								},
								ServiceTypeHealthPolicies: map[string]*armservicefabric.ServiceTypeHealthPolicy{
									"myServiceType1": {
										MaxPercentUnhealthyServices: to.Ptr[int32](100),
									},
								},
							},
						},
						MaxPercentUnhealthyApplications: to.Ptr[int32](0),
						MaxPercentUnhealthyNodes:        to.Ptr[int32](0),
					},
					UpgradeDomainTimeout:          to.Ptr("00:15:00"),
					UpgradeReplicaSetCheckTimeout: to.Ptr("00:10:00"),
					UpgradeTimeout:                to.Ptr("01:00:00"),
				},
				UpgradeMode:                   to.Ptr(armservicefabric.UpgradeModeManual),
				UpgradePauseEndTimestampUTC:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-25T22:00:00Z"); return t }()),
				UpgradePauseStartTimestampUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-21T22:00:00Z"); return t }()),
				UpgradeWave:                   to.Ptr(armservicefabric.ClusterUpgradeCadenceWave1),
				VMImage:                       to.Ptr("Windows"),
				VmssZonalUpgradeMode:          to.Ptr(armservicefabric.VmssZonalUpgradeModeParallel),
			},
		},
		&armservicefabric.ClustersClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ClusterPutOperation_example_max.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ClusterPutOperation_example_max.json: %v", err)
	}
	// Response check
	exampleRes := armservicefabric.Cluster{
		Name:     to.Ptr("myCluster"),
		Type:     to.Ptr("Microsoft.ServiceFabric/clusters"),
		Etag:     to.Ptr("W/\"636462502169240745\""),
		ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.ServiceFabric/clusters/myCluster"),
		Location: to.Ptr("eastus"),
		Tags:     map[string]*string{},
		Properties: &armservicefabric.ClusterProperties{
			AddOnFeatures: []*armservicefabric.AddOnFeatures{
				to.Ptr(armservicefabric.AddOnFeaturesRepairManager),
				to.Ptr(armservicefabric.AddOnFeaturesDNSService),
				to.Ptr(armservicefabric.AddOnFeaturesBackupRestoreService),
				to.Ptr(armservicefabric.AddOnFeaturesResourceMonitorService)},
			ApplicationTypeVersionsCleanupPolicy: &armservicefabric.ApplicationTypeVersionsCleanupPolicy{
				MaxUnusedVersionsToKeep: to.Ptr[int64](2),
			},
			AvailableClusterVersions: []*armservicefabric.ClusterVersionDetails{
				{
					CodeVersion:      to.Ptr("7.0.470.9590"),
					Environment:      to.Ptr(armservicefabric.ClusterEnvironmentWindows),
					SupportExpiryUTC: to.Ptr("2018-06-15T23:59:59.9999999"),
				}},
			AzureActiveDirectory: &armservicefabric.AzureActiveDirectory{
				ClientApplication:  to.Ptr("d151ad89-4bce-4ae8-b3d1-1dc79679fa75"),
				ClusterApplication: to.Ptr("5886372e-7bf4-4878-a497-8098aba608ae"),
				TenantID:           to.Ptr("6abcc6a0-8666-43f1-87b8-172cf86a9f9c"),
			},
			CertificateCommonNames: &armservicefabric.ServerCertificateCommonNames{
				CommonNames: []*armservicefabric.ServerCertificateCommonName{
					{
						CertificateCommonName:       to.Ptr("abc.com"),
						CertificateIssuerThumbprint: to.Ptr("12599211F8F14C90AFA9532AD79A6F2CA1C00622"),
					}},
				X509StoreName: to.Ptr(armservicefabric.StoreNameMy),
			},
			ClientCertificateCommonNames: []*armservicefabric.ClientCertificateCommonName{
				{
					CertificateCommonName:       to.Ptr("abc.com"),
					CertificateIssuerThumbprint: to.Ptr("5F3660C715EBBDA31DB1FFDCF508302348DE8E7A"),
					IsAdmin:                     to.Ptr(true),
				}},
			ClientCertificateThumbprints: []*armservicefabric.ClientCertificateThumbprint{
				{
					CertificateThumbprint: to.Ptr("5F3660C715EBBDA31DB1FFDCF508302348DE8E7A"),
					IsAdmin:               to.Ptr(false),
				}},
			ClusterCodeVersion: to.Ptr("7.0.470.9590"),
			ClusterEndpoint:    to.Ptr("https://eastus.servicefabric.azure.com"),
			ClusterID:          to.Ptr("92584666-9889-4ae8-8d02-91902923d37f"),
			ClusterState:       to.Ptr(armservicefabric.ClusterStateWaitingForNodes),
			DiagnosticsStorageAccountConfig: &armservicefabric.DiagnosticsStorageAccountConfig{
				BlobEndpoint:            to.Ptr("https://diag.blob.core.windows.net/"),
				ProtectedAccountKeyName: to.Ptr("StorageAccountKey1"),
				QueueEndpoint:           to.Ptr("https://diag.queue.core.windows.net/"),
				StorageAccountName:      to.Ptr("diag"),
				TableEndpoint:           to.Ptr("https://diag.table.core.windows.net/"),
			},
			EventStoreServiceEnabled: to.Ptr(true),
			FabricSettings: []*armservicefabric.SettingsSectionDescription{
				{
					Name: to.Ptr("UpgradeService"),
					Parameters: []*armservicefabric.SettingsParameterDescription{
						{
							Name:  to.Ptr("AppPollIntervalInSeconds"),
							Value: to.Ptr("60"),
						}},
				}},
			InfrastructureServiceManager: to.Ptr(true),
			ManagementEndpoint:           to.Ptr("https://myCluster.eastus.cloudapp.azure.com:19080"),
			NodeTypes: []*armservicefabric.NodeTypeDescription{
				{
					Name: to.Ptr("nt1vm"),
					ApplicationPorts: &armservicefabric.EndpointRangeDescription{
						EndPort:   to.Ptr[int32](30000),
						StartPort: to.Ptr[int32](20000),
					},
					ClientConnectionEndpointPort: to.Ptr[int32](19000),
					DurabilityLevel:              to.Ptr(armservicefabric.DurabilityLevelSilver),
					EphemeralPorts: &armservicefabric.EndpointRangeDescription{
						EndPort:   to.Ptr[int32](64000),
						StartPort: to.Ptr[int32](49000),
					},
					HTTPGatewayEndpointPort:   to.Ptr[int32](19007),
					IsPrimary:                 to.Ptr(true),
					IsStateless:               to.Ptr(false),
					MultipleAvailabilityZones: to.Ptr(true),
					VMInstanceCount:           to.Ptr[int32](5),
				}},
			Notifications: []*armservicefabric.Notification{
				{
					IsEnabled:            to.Ptr(true),
					NotificationCategory: to.Ptr(armservicefabric.NotificationCategoryWaveProgress),
					NotificationLevel:    to.Ptr(armservicefabric.NotificationLevelCritical),
					NotificationTargets: []*armservicefabric.NotificationTarget{
						{
							NotificationChannel: to.Ptr(armservicefabric.NotificationChannelEmailUser),
							Receivers: []*string{
								to.Ptr("****@microsoft.com"),
								to.Ptr("****@microsoft.com")},
						},
						{
							NotificationChannel: to.Ptr(armservicefabric.NotificationChannelEmailSubscription),
							Receivers: []*string{
								to.Ptr("Owner"),
								to.Ptr("AccountAdmin")},
						}},
				},
				{
					IsEnabled:            to.Ptr(true),
					NotificationCategory: to.Ptr(armservicefabric.NotificationCategoryWaveProgress),
					NotificationLevel:    to.Ptr(armservicefabric.NotificationLevelAll),
					NotificationTargets: []*armservicefabric.NotificationTarget{
						{
							NotificationChannel: to.Ptr(armservicefabric.NotificationChannelEmailUser),
							Receivers: []*string{
								to.Ptr("****@microsoft.com"),
								to.Ptr("****@microsoft.com")},
						},
						{
							NotificationChannel: to.Ptr(armservicefabric.NotificationChannelEmailSubscription),
							Receivers: []*string{
								to.Ptr("Owner"),
								to.Ptr("AccountAdmin")},
						}},
				}},
			ProvisioningState: to.Ptr(armservicefabric.ProvisioningStateSucceeded),
			ReliabilityLevel:  to.Ptr(armservicefabric.ReliabilityLevelPlatinum),
			ReverseProxyCertificateCommonNames: &armservicefabric.ServerCertificateCommonNames{
				CommonNames: []*armservicefabric.ServerCertificateCommonName{
					{
						CertificateCommonName:       to.Ptr("abc.com"),
						CertificateIssuerThumbprint: to.Ptr("12599211F8F14C90AFA9532AD79A6F2CA1C00622"),
					}},
				X509StoreName: to.Ptr(armservicefabric.StoreNameMy),
			},
			SfZonalUpgradeMode: to.Ptr(armservicefabric.SfZonalUpgradeModeHierarchical),
			UpgradeDescription: &armservicefabric.ClusterUpgradePolicy{
				DeltaHealthPolicy: &armservicefabric.ClusterUpgradeDeltaHealthPolicy{
					ApplicationDeltaHealthPolicies: map[string]*armservicefabric.ApplicationDeltaHealthPolicy{
						"fabric:/myApp1": {
							DefaultServiceTypeDeltaHealthPolicy: &armservicefabric.ServiceTypeDeltaHealthPolicy{
								MaxPercentDeltaUnhealthyServices: to.Ptr[int32](0),
							},
							ServiceTypeDeltaHealthPolicies: map[string]*armservicefabric.ServiceTypeDeltaHealthPolicy{
								"myServiceType1": {
									MaxPercentDeltaUnhealthyServices: to.Ptr[int32](0),
								},
							},
						},
					},
					MaxPercentDeltaUnhealthyApplications:       to.Ptr[int32](0),
					MaxPercentDeltaUnhealthyNodes:              to.Ptr[int32](0),
					MaxPercentUpgradeDomainDeltaUnhealthyNodes: to.Ptr[int32](0),
				},
				ForceRestart:              to.Ptr(true),
				HealthCheckRetryTimeout:   to.Ptr("00:05:00"),
				HealthCheckStableDuration: to.Ptr("00:00:30"),
				HealthCheckWaitDuration:   to.Ptr("00:00:30"),
				HealthPolicy: &armservicefabric.ClusterHealthPolicy{
					ApplicationHealthPolicies: map[string]*armservicefabric.ApplicationHealthPolicy{
						"fabric:/myApp1": {
							DefaultServiceTypeHealthPolicy: &armservicefabric.ServiceTypeHealthPolicy{
								MaxPercentUnhealthyServices: to.Ptr[int32](0),
							},
							ServiceTypeHealthPolicies: map[string]*armservicefabric.ServiceTypeHealthPolicy{
								"myServiceType1": {
									MaxPercentUnhealthyServices: to.Ptr[int32](100),
								},
							},
						},
					},
					MaxPercentUnhealthyApplications: to.Ptr[int32](0),
					MaxPercentUnhealthyNodes:        to.Ptr[int32](0),
				},
				UpgradeDomainTimeout:          to.Ptr("00:15:00"),
				UpgradeReplicaSetCheckTimeout: to.Ptr("00:10:00"),
				UpgradeTimeout:                to.Ptr("00:15:00"),
			},
			UpgradeMode:                   to.Ptr(armservicefabric.UpgradeModeManual),
			UpgradePauseEndTimestampUTC:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-25T22:00:00Z"); return t }()),
			UpgradePauseStartTimestampUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-21T22:00:00Z"); return t }()),
			UpgradeWave:                   to.Ptr(armservicefabric.ClusterUpgradeCadenceWave1),
			VMImage:                       to.Ptr("Windows"),
			VmssZonalUpgradeMode:          to.Ptr(armservicefabric.VmssZonalUpgradeModeParallel),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Cluster) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Cluster)
		t.Fatalf("Mock response is not equal to example response for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ClusterPutOperation_example_max.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ClusterPutOperation_example_min.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Put a cluster with minimum parameters"},
	})
	client, err = armservicefabric.NewClustersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"resRg",
		"myCluster",
		armservicefabric.Cluster{
			Location: to.Ptr("eastus"),
			Tags:     map[string]*string{},
			Properties: &armservicefabric.ClusterProperties{
				DiagnosticsStorageAccountConfig: &armservicefabric.DiagnosticsStorageAccountConfig{
					BlobEndpoint:            to.Ptr("https://diag.blob.core.windows.net/"),
					ProtectedAccountKeyName: to.Ptr("StorageAccountKey1"),
					QueueEndpoint:           to.Ptr("https://diag.queue.core.windows.net/"),
					StorageAccountName:      to.Ptr("diag"),
					TableEndpoint:           to.Ptr("https://diag.table.core.windows.net/"),
				},
				FabricSettings: []*armservicefabric.SettingsSectionDescription{
					{
						Name: to.Ptr("UpgradeService"),
						Parameters: []*armservicefabric.SettingsParameterDescription{
							{
								Name:  to.Ptr("AppPollIntervalInSeconds"),
								Value: to.Ptr("60"),
							}},
					}},
				ManagementEndpoint: to.Ptr("http://myCluster.eastus.cloudapp.azure.com:19080"),
				NodeTypes: []*armservicefabric.NodeTypeDescription{
					{
						Name: to.Ptr("nt1vm"),
						ApplicationPorts: &armservicefabric.EndpointRangeDescription{
							EndPort:   to.Ptr[int32](30000),
							StartPort: to.Ptr[int32](20000),
						},
						ClientConnectionEndpointPort: to.Ptr[int32](19000),
						DurabilityLevel:              to.Ptr(armservicefabric.DurabilityLevelBronze),
						EphemeralPorts: &armservicefabric.EndpointRangeDescription{
							EndPort:   to.Ptr[int32](64000),
							StartPort: to.Ptr[int32](49000),
						},
						HTTPGatewayEndpointPort: to.Ptr[int32](19007),
						IsPrimary:               to.Ptr(true),
						VMInstanceCount:         to.Ptr[int32](5),
					}},
				ReliabilityLevel: to.Ptr(armservicefabric.ReliabilityLevelSilver),
				UpgradeMode:      to.Ptr(armservicefabric.UpgradeModeAutomatic),
			},
		},
		&armservicefabric.ClustersClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ClusterPutOperation_example_min.json: %v", err)
	}
	res, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ClusterPutOperation_example_min.json: %v", err)
	}
	// Response check
	exampleRes = armservicefabric.Cluster{
		Name:     to.Ptr("myCluster"),
		Type:     to.Ptr("Microsoft.ServiceFabric/clusters"),
		Etag:     to.Ptr("W/\"636462502169240743\""),
		ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.ServiceFabric/clusters/myCluster"),
		Location: to.Ptr("eastus"),
		Tags:     map[string]*string{},
		Properties: &armservicefabric.ClusterProperties{
			AvailableClusterVersions: []*armservicefabric.ClusterVersionDetails{
				{
					CodeVersion:      to.Ptr("7.0.470.9590"),
					Environment:      to.Ptr(armservicefabric.ClusterEnvironmentWindows),
					SupportExpiryUTC: to.Ptr("2018-06-15T23:59:59.9999999"),
				}},
			ClientCertificateCommonNames: []*armservicefabric.ClientCertificateCommonName{},
			ClientCertificateThumbprints: []*armservicefabric.ClientCertificateThumbprint{},
			ClusterCodeVersion:           to.Ptr("7.0.470.9590"),
			ClusterEndpoint:              to.Ptr("https://eastus.servicefabric.azure.com"),
			ClusterID:                    to.Ptr("92584666-9889-4ae8-8d02-91902923d37f"),
			ClusterState:                 to.Ptr(armservicefabric.ClusterStateWaitingForNodes),
			DiagnosticsStorageAccountConfig: &armservicefabric.DiagnosticsStorageAccountConfig{
				BlobEndpoint:            to.Ptr("https://diag.blob.core.windows.net/"),
				ProtectedAccountKeyName: to.Ptr("StorageAccountKey1"),
				QueueEndpoint:           to.Ptr("https://diag.queue.core.windows.net/"),
				StorageAccountName:      to.Ptr("diag"),
				TableEndpoint:           to.Ptr("https://diag.table.core.windows.net/"),
			},
			FabricSettings: []*armservicefabric.SettingsSectionDescription{
				{
					Name: to.Ptr("UpgradeService"),
					Parameters: []*armservicefabric.SettingsParameterDescription{
						{
							Name:  to.Ptr("AppPollIntervalInSeconds"),
							Value: to.Ptr("60"),
						}},
				}},
			ManagementEndpoint: to.Ptr("http://myCluster.eastus.cloudapp.azure.com:19080"),
			NodeTypes: []*armservicefabric.NodeTypeDescription{
				{
					Name: to.Ptr("nt1vm"),
					ApplicationPorts: &armservicefabric.EndpointRangeDescription{
						EndPort:   to.Ptr[int32](30000),
						StartPort: to.Ptr[int32](20000),
					},
					ClientConnectionEndpointPort: to.Ptr[int32](19000),
					DurabilityLevel:              to.Ptr(armservicefabric.DurabilityLevelBronze),
					EphemeralPorts: &armservicefabric.EndpointRangeDescription{
						EndPort:   to.Ptr[int32](64000),
						StartPort: to.Ptr[int32](49000),
					},
					HTTPGatewayEndpointPort: to.Ptr[int32](19007),
					IsPrimary:               to.Ptr(true),
					VMInstanceCount:         to.Ptr[int32](5),
				}},
			ProvisioningState: to.Ptr(armservicefabric.ProvisioningStateSucceeded),
			ReliabilityLevel:  to.Ptr(armservicefabric.ReliabilityLevelSilver),
			UpgradeDescription: &armservicefabric.ClusterUpgradePolicy{
				DeltaHealthPolicy: &armservicefabric.ClusterUpgradeDeltaHealthPolicy{
					MaxPercentDeltaUnhealthyApplications:       to.Ptr[int32](0),
					MaxPercentDeltaUnhealthyNodes:              to.Ptr[int32](0),
					MaxPercentUpgradeDomainDeltaUnhealthyNodes: to.Ptr[int32](0),
				},
				ForceRestart:              to.Ptr(false),
				HealthCheckRetryTimeout:   to.Ptr("00:45:00"),
				HealthCheckStableDuration: to.Ptr("00:05:00"),
				HealthCheckWaitDuration:   to.Ptr("00:05:00"),
				HealthPolicy: &armservicefabric.ClusterHealthPolicy{
					MaxPercentUnhealthyApplications: to.Ptr[int32](100),
					MaxPercentUnhealthyNodes:        to.Ptr[int32](100),
				},
				UpgradeDomainTimeout:          to.Ptr("02:00:00"),
				UpgradeReplicaSetCheckTimeout: to.Ptr("10675199.02:48:05.4775807"),
				UpgradeTimeout:                to.Ptr("12:00:00"),
			},
			UpgradeMode: to.Ptr(armservicefabric.UpgradeModeAutomatic),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Cluster) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Cluster)
		t.Fatalf("Mock response is not equal to example response for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ClusterPutOperation_example_min.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestClusters_Update(t *testing.T) {
	// From example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ClusterPatchOperation_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Patch a cluster"},
	})
	client, err := armservicefabric.NewClustersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginUpdate(ctx,
		"resRg",
		"myCluster",
		armservicefabric.ClusterUpdateParameters{
			Properties: &armservicefabric.ClusterPropertiesUpdateParameters{
				EventStoreServiceEnabled: to.Ptr(true),
				NodeTypes: []*armservicefabric.NodeTypeDescription{
					{
						Name: to.Ptr("nt1vm"),
						ApplicationPorts: &armservicefabric.EndpointRangeDescription{
							EndPort:   to.Ptr[int32](30000),
							StartPort: to.Ptr[int32](20000),
						},
						ClientConnectionEndpointPort: to.Ptr[int32](19000),
						DurabilityLevel:              to.Ptr(armservicefabric.DurabilityLevelBronze),
						EphemeralPorts: &armservicefabric.EndpointRangeDescription{
							EndPort:   to.Ptr[int32](64000),
							StartPort: to.Ptr[int32](49000),
						},
						HTTPGatewayEndpointPort: to.Ptr[int32](19007),
						IsPrimary:               to.Ptr(true),
						VMInstanceCount:         to.Ptr[int32](5),
					},
					{
						Name: to.Ptr("testnt1"),
						ApplicationPorts: &armservicefabric.EndpointRangeDescription{
							EndPort:   to.Ptr[int32](2000),
							StartPort: to.Ptr[int32](1000),
						},
						ClientConnectionEndpointPort: to.Ptr[int32](0),
						DurabilityLevel:              to.Ptr(armservicefabric.DurabilityLevelBronze),
						EphemeralPorts: &armservicefabric.EndpointRangeDescription{
							EndPort:   to.Ptr[int32](4000),
							StartPort: to.Ptr[int32](3000),
						},
						HTTPGatewayEndpointPort: to.Ptr[int32](0),
						IsPrimary:               to.Ptr(false),
						VMInstanceCount:         to.Ptr[int32](3),
					}},
				ReliabilityLevel:              to.Ptr(armservicefabric.ReliabilityLevelBronze),
				UpgradeMode:                   to.Ptr(armservicefabric.UpgradeModeAutomatic),
				UpgradePauseEndTimestampUTC:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-25T22:00:00Z"); return t }()),
				UpgradePauseStartTimestampUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-21T22:00:00Z"); return t }()),
				UpgradeWave:                   to.Ptr(armservicefabric.ClusterUpgradeCadence("Wave")),
			},
			Tags: map[string]*string{
				"a": to.Ptr("b"),
			},
		},
		&armservicefabric.ClustersClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ClusterPatchOperation_example.json: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ClusterPatchOperation_example.json: %v", err)
	}
	// Response check
	exampleRes := armservicefabric.Cluster{
		Name:     to.Ptr("myCluster"),
		Type:     to.Ptr("Microsoft.ServiceFabric/clusters"),
		Etag:     to.Ptr("W/\"636462502169240744\""),
		ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.ServiceFabric/clusters/myCluster"),
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"a": to.Ptr("b"),
		},
		Properties: &armservicefabric.ClusterProperties{
			AvailableClusterVersions: []*armservicefabric.ClusterVersionDetails{
				{
					CodeVersion:      to.Ptr("6.1.480.9494"),
					Environment:      to.Ptr(armservicefabric.ClusterEnvironmentWindows),
					SupportExpiryUTC: to.Ptr("2018-06-15T23:59:59.9999999"),
				}},
			CertificateCommonNames: &armservicefabric.ServerCertificateCommonNames{
				CommonNames: []*armservicefabric.ServerCertificateCommonName{
					{
						CertificateCommonName:       to.Ptr("abc.com"),
						CertificateIssuerThumbprint: to.Ptr("12599211F8F14C90AFA9532AD79A6F2CA1C00622"),
					}},
				X509StoreName: to.Ptr(armservicefabric.StoreNameMy),
			},
			ClientCertificateCommonNames: []*armservicefabric.ClientCertificateCommonName{},
			ClientCertificateThumbprints: []*armservicefabric.ClientCertificateThumbprint{},
			ClusterCodeVersion:           to.Ptr("6.1.480.9494"),
			ClusterEndpoint:              to.Ptr("https://eastus.servicefabric.azure.com"),
			ClusterID:                    to.Ptr("92584666-9889-4ae8-8d02-91902923d37f"),
			ClusterState:                 to.Ptr(armservicefabric.ClusterStateWaitingForNodes),
			DiagnosticsStorageAccountConfig: &armservicefabric.DiagnosticsStorageAccountConfig{
				BlobEndpoint:            to.Ptr("https://diag.blob.core.windows.net/"),
				ProtectedAccountKeyName: to.Ptr("StorageAccountKey1"),
				QueueEndpoint:           to.Ptr("https://diag.queue.core.windows.net/"),
				StorageAccountName:      to.Ptr("diag"),
				TableEndpoint:           to.Ptr("https://diag.table.core.windows.net/"),
			},
			EventStoreServiceEnabled: to.Ptr(true),
			FabricSettings: []*armservicefabric.SettingsSectionDescription{
				{
					Name: to.Ptr("UpgradeService"),
					Parameters: []*armservicefabric.SettingsParameterDescription{
						{
							Name:  to.Ptr("AppPollIntervalInSeconds"),
							Value: to.Ptr("60"),
						}},
				}},
			ManagementEndpoint: to.Ptr("http://myCluster.eastus.cloudapp.azure.com:19080"),
			NodeTypes: []*armservicefabric.NodeTypeDescription{
				{
					Name: to.Ptr("nt1vm"),
					ApplicationPorts: &armservicefabric.EndpointRangeDescription{
						EndPort:   to.Ptr[int32](30000),
						StartPort: to.Ptr[int32](20000),
					},
					ClientConnectionEndpointPort: to.Ptr[int32](19000),
					DurabilityLevel:              to.Ptr(armservicefabric.DurabilityLevelBronze),
					EphemeralPorts: &armservicefabric.EndpointRangeDescription{
						EndPort:   to.Ptr[int32](64000),
						StartPort: to.Ptr[int32](49000),
					},
					HTTPGatewayEndpointPort: to.Ptr[int32](19007),
					IsPrimary:               to.Ptr(true),
					VMInstanceCount:         to.Ptr[int32](5),
				},
				{
					Name: to.Ptr("testnt1"),
					ApplicationPorts: &armservicefabric.EndpointRangeDescription{
						EndPort:   to.Ptr[int32](2000),
						StartPort: to.Ptr[int32](1000),
					},
					ClientConnectionEndpointPort: to.Ptr[int32](0),
					DurabilityLevel:              to.Ptr(armservicefabric.DurabilityLevelBronze),
					EphemeralPorts: &armservicefabric.EndpointRangeDescription{
						EndPort:   to.Ptr[int32](4000),
						StartPort: to.Ptr[int32](3000),
					},
					HTTPGatewayEndpointPort: to.Ptr[int32](0),
					IsPrimary:               to.Ptr(false),
					VMInstanceCount:         to.Ptr[int32](3),
				}},
			Notifications: []*armservicefabric.Notification{
				{
					IsEnabled:            to.Ptr(true),
					NotificationCategory: to.Ptr(armservicefabric.NotificationCategoryWaveProgress),
					NotificationLevel:    to.Ptr(armservicefabric.NotificationLevelCritical),
					NotificationTargets: []*armservicefabric.NotificationTarget{
						{
							NotificationChannel: to.Ptr(armservicefabric.NotificationChannelEmailUser),
							Receivers: []*string{
								to.Ptr("****@microsoft.com"),
								to.Ptr("****@microsoft.com")},
						},
						{
							NotificationChannel: to.Ptr(armservicefabric.NotificationChannelEmailSubscription),
							Receivers: []*string{
								to.Ptr("Owner"),
								to.Ptr("AccountAdmin")},
						}},
				},
				{
					IsEnabled:            to.Ptr(true),
					NotificationCategory: to.Ptr(armservicefabric.NotificationCategoryWaveProgress),
					NotificationLevel:    to.Ptr(armservicefabric.NotificationLevelAll),
					NotificationTargets: []*armservicefabric.NotificationTarget{
						{
							NotificationChannel: to.Ptr(armservicefabric.NotificationChannelEmailUser),
							Receivers: []*string{
								to.Ptr("****@microsoft.com"),
								to.Ptr("****@microsoft.com")},
						},
						{
							NotificationChannel: to.Ptr(armservicefabric.NotificationChannelEmailSubscription),
							Receivers: []*string{
								to.Ptr("Owner"),
								to.Ptr("AccountAdmin")},
						}},
				}},
			ProvisioningState: to.Ptr(armservicefabric.ProvisioningStateSucceeded),
			ReliabilityLevel:  to.Ptr(armservicefabric.ReliabilityLevelBronze),
			UpgradeDescription: &armservicefabric.ClusterUpgradePolicy{
				DeltaHealthPolicy: &armservicefabric.ClusterUpgradeDeltaHealthPolicy{
					MaxPercentDeltaUnhealthyApplications:       to.Ptr[int32](0),
					MaxPercentDeltaUnhealthyNodes:              to.Ptr[int32](0),
					MaxPercentUpgradeDomainDeltaUnhealthyNodes: to.Ptr[int32](0),
				},
				ForceRestart:              to.Ptr(false),
				HealthCheckRetryTimeout:   to.Ptr("00:05:00"),
				HealthCheckStableDuration: to.Ptr("00:00:30"),
				HealthCheckWaitDuration:   to.Ptr("00:00:30"),
				HealthPolicy: &armservicefabric.ClusterHealthPolicy{
					MaxPercentUnhealthyApplications: to.Ptr[int32](0),
					MaxPercentUnhealthyNodes:        to.Ptr[int32](0),
				},
				UpgradeDomainTimeout:          to.Ptr("00:15:00"),
				UpgradeReplicaSetCheckTimeout: to.Ptr("00:10:00"),
				UpgradeTimeout:                to.Ptr("01:00:00"),
			},
			UpgradeMode:                   to.Ptr(armservicefabric.UpgradeModeAutomatic),
			UpgradePauseEndTimestampUTC:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-25T22:00:00Z"); return t }()),
			UpgradePauseStartTimestampUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-21T22:00:00Z"); return t }()),
			UpgradeWave:                   to.Ptr(armservicefabric.ClusterUpgradeCadenceWave2),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.Cluster) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.Cluster)
		t.Fatalf("Mock response is not equal to example response for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ClusterPatchOperation_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestClusters_Delete(t *testing.T) {
	// From example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ClusterDeleteOperation_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a cluster"},
	})
	client, err := armservicefabric.NewClustersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	_, err = client.Delete(ctx,
		"resRg",
		"myCluster",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ClusterDeleteOperation_example.json: %v", err)
	}
}

func TestClusters_ListByResourceGroup(t *testing.T) {
	// From example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ClusterListByResourceGroupOperation_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List cluster by resource group"},
	})
	client, err := armservicefabric.NewClustersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.ListByResourceGroup(ctx,
		"resRg",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ClusterListByResourceGroupOperation_example.json: %v", err)
	}
	// Response check
	exampleRes := armservicefabric.ClusterListResult{
		Value: []*armservicefabric.Cluster{
			{
				Name:     to.Ptr("myCluster"),
				Type:     to.Ptr("Microsoft.ServiceFabric/clusters"),
				Etag:     to.Ptr("W/\"636462502169240745\""),
				ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.ServiceFabric/clusters/myCluster"),
				Location: to.Ptr("eastus"),
				Tags:     map[string]*string{},
				Properties: &armservicefabric.ClusterProperties{
					AddOnFeatures: []*armservicefabric.AddOnFeatures{
						to.Ptr(armservicefabric.AddOnFeaturesRepairManager),
						to.Ptr(armservicefabric.AddOnFeaturesDNSService),
						to.Ptr(armservicefabric.AddOnFeaturesBackupRestoreService),
						to.Ptr(armservicefabric.AddOnFeaturesResourceMonitorService)},
					AvailableClusterVersions: []*armservicefabric.ClusterVersionDetails{
						{
							CodeVersion:      to.Ptr("6.1.480.9494"),
							Environment:      to.Ptr(armservicefabric.ClusterEnvironmentWindows),
							SupportExpiryUTC: to.Ptr("2018-06-15T23:59:59.9999999"),
						}},
					AzureActiveDirectory: &armservicefabric.AzureActiveDirectory{
						ClientApplication:  to.Ptr("d151ad89-4bce-4ae8-b3d1-1dc79679fa75"),
						ClusterApplication: to.Ptr("5886372e-7bf4-4878-a497-8098aba608ae"),
						TenantID:           to.Ptr("6abcc6a0-8666-43f1-87b8-172cf86a9f9c"),
					},
					CertificateCommonNames: &armservicefabric.ServerCertificateCommonNames{
						CommonNames: []*armservicefabric.ServerCertificateCommonName{
							{
								CertificateCommonName:       to.Ptr("abc.com"),
								CertificateIssuerThumbprint: to.Ptr("12599211F8F14C90AFA9532AD79A6F2CA1C00622"),
							}},
						X509StoreName: to.Ptr(armservicefabric.StoreNameMy),
					},
					ClientCertificateCommonNames: []*armservicefabric.ClientCertificateCommonName{
						{
							CertificateCommonName:       to.Ptr("abc.com"),
							CertificateIssuerThumbprint: to.Ptr("5F3660C715EBBDA31DB1FFDCF508302348DE8E7A"),
							IsAdmin:                     to.Ptr(true),
						}},
					ClientCertificateThumbprints: []*armservicefabric.ClientCertificateThumbprint{
						{
							CertificateThumbprint: to.Ptr("5F3660C715EBBDA31DB1FFDCF508302348DE8E7A"),
							IsAdmin:               to.Ptr(false),
						}},
					ClusterCodeVersion: to.Ptr("6.1.480.9494"),
					ClusterEndpoint:    to.Ptr("https://eastus.servicefabric.azure.com"),
					ClusterID:          to.Ptr("92584666-9889-4ae8-8d02-91902923d37f"),
					ClusterState:       to.Ptr(armservicefabric.ClusterStateWaitingForNodes),
					DiagnosticsStorageAccountConfig: &armservicefabric.DiagnosticsStorageAccountConfig{
						BlobEndpoint:            to.Ptr("https://diag.blob.core.windows.net/"),
						ProtectedAccountKeyName: to.Ptr("StorageAccountKey1"),
						QueueEndpoint:           to.Ptr("https://diag.queue.core.windows.net/"),
						StorageAccountName:      to.Ptr("diag"),
						TableEndpoint:           to.Ptr("https://diag.table.core.windows.net/"),
					},
					FabricSettings: []*armservicefabric.SettingsSectionDescription{
						{
							Name: to.Ptr("UpgradeService"),
							Parameters: []*armservicefabric.SettingsParameterDescription{
								{
									Name:  to.Ptr("AppPollIntervalInSeconds"),
									Value: to.Ptr("60"),
								}},
						}},
					ManagementEndpoint: to.Ptr("https://myCluster.eastus.cloudapp.azure.com:19080"),
					NodeTypes: []*armservicefabric.NodeTypeDescription{
						{
							Name: to.Ptr("nt1vm"),
							ApplicationPorts: &armservicefabric.EndpointRangeDescription{
								EndPort:   to.Ptr[int32](30000),
								StartPort: to.Ptr[int32](20000),
							},
							ClientConnectionEndpointPort: to.Ptr[int32](19000),
							DurabilityLevel:              to.Ptr(armservicefabric.DurabilityLevelBronze),
							EphemeralPorts: &armservicefabric.EndpointRangeDescription{
								EndPort:   to.Ptr[int32](64000),
								StartPort: to.Ptr[int32](49000),
							},
							HTTPGatewayEndpointPort: to.Ptr[int32](19007),
							IsPrimary:               to.Ptr(true),
							VMInstanceCount:         to.Ptr[int32](5),
						}},
					ProvisioningState: to.Ptr(armservicefabric.ProvisioningStateSucceeded),
					ReliabilityLevel:  to.Ptr(armservicefabric.ReliabilityLevelSilver),
					ReverseProxyCertificateCommonNames: &armservicefabric.ServerCertificateCommonNames{
						CommonNames: []*armservicefabric.ServerCertificateCommonName{
							{
								CertificateCommonName:       to.Ptr("abc.com"),
								CertificateIssuerThumbprint: to.Ptr("12599211F8F14C90AFA9532AD79A6F2CA1C00622"),
							}},
						X509StoreName: to.Ptr(armservicefabric.StoreNameMy),
					},
					UpgradeDescription: &armservicefabric.ClusterUpgradePolicy{
						DeltaHealthPolicy: &armservicefabric.ClusterUpgradeDeltaHealthPolicy{
							ApplicationDeltaHealthPolicies: map[string]*armservicefabric.ApplicationDeltaHealthPolicy{
								"fabric:/myApp1": {
									DefaultServiceTypeDeltaHealthPolicy: &armservicefabric.ServiceTypeDeltaHealthPolicy{
										MaxPercentDeltaUnhealthyServices: to.Ptr[int32](0),
									},
									ServiceTypeDeltaHealthPolicies: map[string]*armservicefabric.ServiceTypeDeltaHealthPolicy{
										"myServiceType1": {
											MaxPercentDeltaUnhealthyServices: to.Ptr[int32](0),
										},
									},
								},
							},
							MaxPercentDeltaUnhealthyApplications:       to.Ptr[int32](0),
							MaxPercentDeltaUnhealthyNodes:              to.Ptr[int32](0),
							MaxPercentUpgradeDomainDeltaUnhealthyNodes: to.Ptr[int32](0),
						},
						ForceRestart:              to.Ptr(false),
						HealthCheckRetryTimeout:   to.Ptr("00:05:00"),
						HealthCheckStableDuration: to.Ptr("00:00:30"),
						HealthCheckWaitDuration:   to.Ptr("00:00:30"),
						HealthPolicy: &armservicefabric.ClusterHealthPolicy{
							ApplicationHealthPolicies: map[string]*armservicefabric.ApplicationHealthPolicy{
								"fabric:/myApp1": {
									DefaultServiceTypeHealthPolicy: &armservicefabric.ServiceTypeHealthPolicy{
										MaxPercentUnhealthyServices: to.Ptr[int32](0),
									},
									ServiceTypeHealthPolicies: map[string]*armservicefabric.ServiceTypeHealthPolicy{
										"myServiceType1": {
											MaxPercentUnhealthyServices: to.Ptr[int32](100),
										},
									},
								},
							},
							MaxPercentUnhealthyApplications: to.Ptr[int32](0),
							MaxPercentUnhealthyNodes:        to.Ptr[int32](0),
						},
						UpgradeDomainTimeout:          to.Ptr("00:15:00"),
						UpgradeReplicaSetCheckTimeout: to.Ptr("00:10:00"),
						UpgradeTimeout:                to.Ptr("01:00:00"),
					},
					UpgradeMode: to.Ptr(armservicefabric.UpgradeModeManual),
					VMImage:     to.Ptr("Windows"),
				},
			},
			{
				Name:     to.Ptr("myCluster2"),
				Type:     to.Ptr("Microsoft.ServiceFabric/clusters"),
				Etag:     to.Ptr("W/\"636462502164040075\""),
				ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.ServiceFabric/clusters/myCluster2"),
				Location: to.Ptr("eastus"),
				Tags:     map[string]*string{},
				Properties: &armservicefabric.ClusterProperties{
					AddOnFeatures: []*armservicefabric.AddOnFeatures{
						to.Ptr(armservicefabric.AddOnFeaturesRepairManager)},
					AvailableClusterVersions: []*armservicefabric.ClusterVersionDetails{
						{
							CodeVersion:      to.Ptr("6.1.187.1"),
							Environment:      to.Ptr(armservicefabric.ClusterEnvironmentLinux),
							SupportExpiryUTC: to.Ptr("2018-06-15T23:59:59.9999999"),
						}},
					ClientCertificateCommonNames: []*armservicefabric.ClientCertificateCommonName{},
					ClientCertificateThumbprints: []*armservicefabric.ClientCertificateThumbprint{},
					ClusterCodeVersion:           to.Ptr("6.1.187.1"),
					ClusterEndpoint:              to.Ptr("https://eastus.servicefabric.azure.com"),
					ClusterID:                    to.Ptr("2747e469-b24e-4039-8a0a-46151419523f"),
					ClusterState:                 to.Ptr(armservicefabric.ClusterStateWaitingForNodes),
					DiagnosticsStorageAccountConfig: &armservicefabric.DiagnosticsStorageAccountConfig{
						BlobEndpoint:            to.Ptr("https://diag.blob.core.windows.net/"),
						ProtectedAccountKeyName: to.Ptr("StorageAccountKey1"),
						QueueEndpoint:           to.Ptr("https://diag.queue.core.windows.net/"),
						StorageAccountName:      to.Ptr("diag"),
						TableEndpoint:           to.Ptr("https://diag.table.core.windows.net/"),
					},
					FabricSettings: []*armservicefabric.SettingsSectionDescription{
						{
							Name: to.Ptr("UpgradeService"),
							Parameters: []*armservicefabric.SettingsParameterDescription{
								{
									Name:  to.Ptr("AppPollIntervalInSeconds"),
									Value: to.Ptr("60"),
								}},
						}},
					ManagementEndpoint: to.Ptr("http://myCluster2.eastus.cloudapp.azure.com:19080"),
					NodeTypes: []*armservicefabric.NodeTypeDescription{
						{
							Name: to.Ptr("nt1vm"),
							ApplicationPorts: &armservicefabric.EndpointRangeDescription{
								EndPort:   to.Ptr[int32](30000),
								StartPort: to.Ptr[int32](20000),
							},
							ClientConnectionEndpointPort: to.Ptr[int32](19000),
							DurabilityLevel:              to.Ptr(armservicefabric.DurabilityLevelBronze),
							EphemeralPorts: &armservicefabric.EndpointRangeDescription{
								EndPort:   to.Ptr[int32](64000),
								StartPort: to.Ptr[int32](49000),
							},
							HTTPGatewayEndpointPort: to.Ptr[int32](19007),
							IsPrimary:               to.Ptr(true),
							VMInstanceCount:         to.Ptr[int32](5),
						}},
					ProvisioningState: to.Ptr(armservicefabric.ProvisioningStateSucceeded),
					ReliabilityLevel:  to.Ptr(armservicefabric.ReliabilityLevelSilver),
					UpgradeDescription: &armservicefabric.ClusterUpgradePolicy{
						DeltaHealthPolicy: &armservicefabric.ClusterUpgradeDeltaHealthPolicy{
							MaxPercentDeltaUnhealthyApplications:       to.Ptr[int32](0),
							MaxPercentDeltaUnhealthyNodes:              to.Ptr[int32](0),
							MaxPercentUpgradeDomainDeltaUnhealthyNodes: to.Ptr[int32](0),
						},
						ForceRestart:              to.Ptr(false),
						HealthCheckRetryTimeout:   to.Ptr("00:05:00"),
						HealthCheckStableDuration: to.Ptr("00:00:30"),
						HealthCheckWaitDuration:   to.Ptr("00:00:30"),
						HealthPolicy: &armservicefabric.ClusterHealthPolicy{
							MaxPercentUnhealthyApplications: to.Ptr[int32](0),
							MaxPercentUnhealthyNodes:        to.Ptr[int32](0),
						},
						UpgradeDomainTimeout:          to.Ptr("00:15:00"),
						UpgradeReplicaSetCheckTimeout: to.Ptr("00:10:00"),
						UpgradeTimeout:                to.Ptr("01:00:00"),
					},
					UpgradeMode: to.Ptr(armservicefabric.UpgradeModeManual),
					VMImage:     to.Ptr("Ubuntu"),
				},
			}},
	}
	if !reflect.DeepEqual(exampleRes, res.ClusterListResult) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ClusterListResult)
		t.Fatalf("Mock response is not equal to example response for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ClusterListByResourceGroupOperation_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestClusters_List(t *testing.T) {
	// From example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ClusterListOperation_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List clusters"},
	})
	client, err := armservicefabric.NewClustersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.List(ctx,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ClusterListOperation_example.json: %v", err)
	}
	// Response check
	exampleRes := armservicefabric.ClusterListResult{
		Value: []*armservicefabric.Cluster{
			{
				Name:     to.Ptr("myCluster"),
				Type:     to.Ptr("Microsoft.ServiceFabric/clusters"),
				Etag:     to.Ptr("W/\"636462502169240745\""),
				ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.ServiceFabric/clusters/myCluster"),
				Location: to.Ptr("eastus"),
				Tags:     map[string]*string{},
				Properties: &armservicefabric.ClusterProperties{
					AddOnFeatures: []*armservicefabric.AddOnFeatures{
						to.Ptr(armservicefabric.AddOnFeaturesRepairManager),
						to.Ptr(armservicefabric.AddOnFeaturesDNSService),
						to.Ptr(armservicefabric.AddOnFeaturesBackupRestoreService),
						to.Ptr(armservicefabric.AddOnFeaturesResourceMonitorService)},
					AvailableClusterVersions: []*armservicefabric.ClusterVersionDetails{
						{
							CodeVersion:      to.Ptr("6.1.480.9494"),
							Environment:      to.Ptr(armservicefabric.ClusterEnvironmentWindows),
							SupportExpiryUTC: to.Ptr("2018-06-15T23:59:59.9999999"),
						}},
					AzureActiveDirectory: &armservicefabric.AzureActiveDirectory{
						ClientApplication:  to.Ptr("d151ad89-4bce-4ae8-b3d1-1dc79679fa75"),
						ClusterApplication: to.Ptr("5886372e-7bf4-4878-a497-8098aba608ae"),
						TenantID:           to.Ptr("6abcc6a0-8666-43f1-87b8-172cf86a9f9c"),
					},
					CertificateCommonNames: &armservicefabric.ServerCertificateCommonNames{
						CommonNames: []*armservicefabric.ServerCertificateCommonName{
							{
								CertificateCommonName:       to.Ptr("abc.com"),
								CertificateIssuerThumbprint: to.Ptr("12599211F8F14C90AFA9532AD79A6F2CA1C00622"),
							}},
						X509StoreName: to.Ptr(armservicefabric.StoreNameMy),
					},
					ClientCertificateCommonNames: []*armservicefabric.ClientCertificateCommonName{
						{
							CertificateCommonName:       to.Ptr("abc.com"),
							CertificateIssuerThumbprint: to.Ptr("5F3660C715EBBDA31DB1FFDCF508302348DE8E7A"),
							IsAdmin:                     to.Ptr(true),
						}},
					ClientCertificateThumbprints: []*armservicefabric.ClientCertificateThumbprint{
						{
							CertificateThumbprint: to.Ptr("5F3660C715EBBDA31DB1FFDCF508302348DE8E7A"),
							IsAdmin:               to.Ptr(false),
						}},
					ClusterCodeVersion: to.Ptr("6.1.480.9494"),
					ClusterEndpoint:    to.Ptr("https://eastus.servicefabric.azure.com"),
					ClusterID:          to.Ptr("92584666-9889-4ae8-8d02-91902923d37f"),
					ClusterState:       to.Ptr(armservicefabric.ClusterStateWaitingForNodes),
					DiagnosticsStorageAccountConfig: &armservicefabric.DiagnosticsStorageAccountConfig{
						BlobEndpoint:            to.Ptr("https://diag.blob.core.windows.net/"),
						ProtectedAccountKeyName: to.Ptr("StorageAccountKey1"),
						QueueEndpoint:           to.Ptr("https://diag.queue.core.windows.net/"),
						StorageAccountName:      to.Ptr("diag"),
						TableEndpoint:           to.Ptr("https://diag.table.core.windows.net/"),
					},
					FabricSettings: []*armservicefabric.SettingsSectionDescription{
						{
							Name: to.Ptr("UpgradeService"),
							Parameters: []*armservicefabric.SettingsParameterDescription{
								{
									Name:  to.Ptr("AppPollIntervalInSeconds"),
									Value: to.Ptr("60"),
								}},
						}},
					ManagementEndpoint: to.Ptr("https://myCluster.eastus.cloudapp.azure.com:19080"),
					NodeTypes: []*armservicefabric.NodeTypeDescription{
						{
							Name: to.Ptr("nt1vm"),
							ApplicationPorts: &armservicefabric.EndpointRangeDescription{
								EndPort:   to.Ptr[int32](30000),
								StartPort: to.Ptr[int32](20000),
							},
							ClientConnectionEndpointPort: to.Ptr[int32](19000),
							DurabilityLevel:              to.Ptr(armservicefabric.DurabilityLevelBronze),
							EphemeralPorts: &armservicefabric.EndpointRangeDescription{
								EndPort:   to.Ptr[int32](64000),
								StartPort: to.Ptr[int32](49000),
							},
							HTTPGatewayEndpointPort: to.Ptr[int32](19007),
							IsPrimary:               to.Ptr(true),
							VMInstanceCount:         to.Ptr[int32](5),
						}},
					ProvisioningState: to.Ptr(armservicefabric.ProvisioningStateSucceeded),
					ReliabilityLevel:  to.Ptr(armservicefabric.ReliabilityLevelSilver),
					ReverseProxyCertificateCommonNames: &armservicefabric.ServerCertificateCommonNames{
						CommonNames: []*armservicefabric.ServerCertificateCommonName{
							{
								CertificateCommonName:       to.Ptr("abc.com"),
								CertificateIssuerThumbprint: to.Ptr("12599211F8F14C90AFA9532AD79A6F2CA1C00622"),
							}},
						X509StoreName: to.Ptr(armservicefabric.StoreNameMy),
					},
					UpgradeDescription: &armservicefabric.ClusterUpgradePolicy{
						DeltaHealthPolicy: &armservicefabric.ClusterUpgradeDeltaHealthPolicy{
							ApplicationDeltaHealthPolicies: map[string]*armservicefabric.ApplicationDeltaHealthPolicy{
								"fabric:/myApp1": {
									DefaultServiceTypeDeltaHealthPolicy: &armservicefabric.ServiceTypeDeltaHealthPolicy{
										MaxPercentDeltaUnhealthyServices: to.Ptr[int32](0),
									},
									ServiceTypeDeltaHealthPolicies: map[string]*armservicefabric.ServiceTypeDeltaHealthPolicy{
										"myServiceType1": {
											MaxPercentDeltaUnhealthyServices: to.Ptr[int32](0),
										},
									},
								},
							},
							MaxPercentDeltaUnhealthyApplications:       to.Ptr[int32](0),
							MaxPercentDeltaUnhealthyNodes:              to.Ptr[int32](0),
							MaxPercentUpgradeDomainDeltaUnhealthyNodes: to.Ptr[int32](0),
						},
						ForceRestart:              to.Ptr(false),
						HealthCheckRetryTimeout:   to.Ptr("00:05:00"),
						HealthCheckStableDuration: to.Ptr("00:00:30"),
						HealthCheckWaitDuration:   to.Ptr("00:00:30"),
						HealthPolicy: &armservicefabric.ClusterHealthPolicy{
							ApplicationHealthPolicies: map[string]*armservicefabric.ApplicationHealthPolicy{
								"fabric:/myApp1": {
									DefaultServiceTypeHealthPolicy: &armservicefabric.ServiceTypeHealthPolicy{
										MaxPercentUnhealthyServices: to.Ptr[int32](0),
									},
									ServiceTypeHealthPolicies: map[string]*armservicefabric.ServiceTypeHealthPolicy{
										"myServiceType1": {
											MaxPercentUnhealthyServices: to.Ptr[int32](100),
										},
									},
								},
							},
							MaxPercentUnhealthyApplications: to.Ptr[int32](0),
							MaxPercentUnhealthyNodes:        to.Ptr[int32](0),
						},
						UpgradeDomainTimeout:          to.Ptr("00:15:00"),
						UpgradeReplicaSetCheckTimeout: to.Ptr("00:10:00"),
						UpgradeTimeout:                to.Ptr("01:00:00"),
					},
					UpgradeMode: to.Ptr(armservicefabric.UpgradeModeManual),
					VMImage:     to.Ptr("Windows"),
				},
			},
			{
				Name:     to.Ptr("myCluster2"),
				Type:     to.Ptr("Microsoft.ServiceFabric/clusters"),
				Etag:     to.Ptr("W/\"636462502164040075\""),
				ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.ServiceFabric/clusters/myCluster2"),
				Location: to.Ptr("eastus"),
				Tags:     map[string]*string{},
				Properties: &armservicefabric.ClusterProperties{
					AddOnFeatures: []*armservicefabric.AddOnFeatures{
						to.Ptr(armservicefabric.AddOnFeaturesRepairManager)},
					AvailableClusterVersions: []*armservicefabric.ClusterVersionDetails{
						{
							CodeVersion:      to.Ptr("6.1.187.1"),
							Environment:      to.Ptr(armservicefabric.ClusterEnvironmentLinux),
							SupportExpiryUTC: to.Ptr("2018-06-15T23:59:59.9999999"),
						}},
					ClientCertificateCommonNames: []*armservicefabric.ClientCertificateCommonName{},
					ClientCertificateThumbprints: []*armservicefabric.ClientCertificateThumbprint{},
					ClusterCodeVersion:           to.Ptr("6.1.187.1"),
					ClusterEndpoint:              to.Ptr("https://eastus.servicefabric.azure.com"),
					ClusterID:                    to.Ptr("2747e469-b24e-4039-8a0a-46151419523f"),
					ClusterState:                 to.Ptr(armservicefabric.ClusterStateWaitingForNodes),
					DiagnosticsStorageAccountConfig: &armservicefabric.DiagnosticsStorageAccountConfig{
						BlobEndpoint:            to.Ptr("https://diag.blob.core.windows.net/"),
						ProtectedAccountKeyName: to.Ptr("StorageAccountKey1"),
						QueueEndpoint:           to.Ptr("https://diag.queue.core.windows.net/"),
						StorageAccountName:      to.Ptr("diag"),
						TableEndpoint:           to.Ptr("https://diag.table.core.windows.net/"),
					},
					FabricSettings: []*armservicefabric.SettingsSectionDescription{
						{
							Name: to.Ptr("UpgradeService"),
							Parameters: []*armservicefabric.SettingsParameterDescription{
								{
									Name:  to.Ptr("AppPollIntervalInSeconds"),
									Value: to.Ptr("60"),
								}},
						}},
					ManagementEndpoint: to.Ptr("http://myCluster2.eastus.cloudapp.azure.com:19080"),
					NodeTypes: []*armservicefabric.NodeTypeDescription{
						{
							Name: to.Ptr("nt1vm"),
							ApplicationPorts: &armservicefabric.EndpointRangeDescription{
								EndPort:   to.Ptr[int32](30000),
								StartPort: to.Ptr[int32](20000),
							},
							ClientConnectionEndpointPort: to.Ptr[int32](19000),
							DurabilityLevel:              to.Ptr(armservicefabric.DurabilityLevelBronze),
							EphemeralPorts: &armservicefabric.EndpointRangeDescription{
								EndPort:   to.Ptr[int32](64000),
								StartPort: to.Ptr[int32](49000),
							},
							HTTPGatewayEndpointPort: to.Ptr[int32](19007),
							IsPrimary:               to.Ptr(true),
							VMInstanceCount:         to.Ptr[int32](5),
						}},
					ProvisioningState: to.Ptr(armservicefabric.ProvisioningStateSucceeded),
					ReliabilityLevel:  to.Ptr(armservicefabric.ReliabilityLevelSilver),
					UpgradeDescription: &armservicefabric.ClusterUpgradePolicy{
						DeltaHealthPolicy: &armservicefabric.ClusterUpgradeDeltaHealthPolicy{
							MaxPercentDeltaUnhealthyApplications:       to.Ptr[int32](0),
							MaxPercentDeltaUnhealthyNodes:              to.Ptr[int32](0),
							MaxPercentUpgradeDomainDeltaUnhealthyNodes: to.Ptr[int32](0),
						},
						ForceRestart:              to.Ptr(false),
						HealthCheckRetryTimeout:   to.Ptr("00:05:00"),
						HealthCheckStableDuration: to.Ptr("00:00:30"),
						HealthCheckWaitDuration:   to.Ptr("00:00:30"),
						HealthPolicy: &armservicefabric.ClusterHealthPolicy{
							MaxPercentUnhealthyApplications: to.Ptr[int32](0),
							MaxPercentUnhealthyNodes:        to.Ptr[int32](0),
						},
						UpgradeDomainTimeout:          to.Ptr("00:15:00"),
						UpgradeReplicaSetCheckTimeout: to.Ptr("00:10:00"),
						UpgradeTimeout:                to.Ptr("01:00:00"),
					},
					UpgradeMode: to.Ptr(armservicefabric.UpgradeModeManual),
					VMImage:     to.Ptr("Ubuntu"),
				},
			}},
	}
	if !reflect.DeepEqual(exampleRes, res.ClusterListResult) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ClusterListResult)
		t.Fatalf("Mock response is not equal to example response for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ClusterListOperation_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestClusters_ListUpgradableVersions(t *testing.T) {
	// From example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ListUpgradableVersionsMinMax_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get minimum and maximum code versions"},
	})
	client, err := armservicefabric.NewClustersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.ListUpgradableVersions(ctx,
		"resRg",
		"myCluster",
		&armservicefabric.ClustersClientListUpgradableVersionsOptions{VersionsDescription: nil})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ListUpgradableVersionsMinMax_example.json: %v", err)
	}
	// Response check
	exampleRes := armservicefabric.UpgradableVersionPathResult{
		SupportedPath: []*string{
			to.Ptr("7.0.0.0"),
			to.Ptr("7.2.0.0")},
	}
	if !reflect.DeepEqual(exampleRes, res.UpgradableVersionPathResult) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.UpgradableVersionPathResult)
		t.Fatalf("Mock response is not equal to example response for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ListUpgradableVersionsMinMax_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}

	// From example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ListUpgradableVersionsPath_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get upgrade path"},
	})
	client, err = armservicefabric.NewClustersClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err = client.ListUpgradableVersions(ctx,
		"resRg",
		"myCluster",
		&armservicefabric.ClustersClientListUpgradableVersionsOptions{VersionsDescription: &armservicefabric.UpgradableVersionsDescription{
			TargetVersion: to.Ptr("7.2.432.9590"),
		},
		})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ListUpgradableVersionsPath_example.json: %v", err)
	}
	// Response check
	exampleRes = armservicefabric.UpgradableVersionPathResult{
		SupportedPath: []*string{
			to.Ptr("6.4.664.9590"),
			to.Ptr("7.0.466.9590"),
			to.Ptr("7.0.470.9590"),
			to.Ptr("7.2.432.9590")},
	}
	if !reflect.DeepEqual(exampleRes, res.UpgradableVersionPathResult) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.UpgradableVersionPathResult)
		t.Fatalf("Mock response is not equal to example response for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ListUpgradableVersionsPath_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestClusterVersions_Get(t *testing.T) {
	// From example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ClusterVersionsGet_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get cluster version"},
	})
	client, err := armservicefabric.NewClusterVersionsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Get(ctx,
		"eastus",
		"6.1.480.9494",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ClusterVersionsGet_example.json: %v", err)
	}
	// Response check
	exampleRes := armservicefabric.ClusterCodeVersionsListResult{
		Value: []*armservicefabric.ClusterCodeVersionsResult{
			{
				Name: to.Ptr("6.1.480.9494"),
				Type: to.Ptr("Microsoft.ServiceFabric/locations/environments/clusterVersions"),
				ID:   to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.ServiceFabric/locations/eastus/environments/Windows/clusterVersions/6.1.480.9494"),
				Properties: &armservicefabric.ClusterVersionDetails{
					CodeVersion:      to.Ptr("6.1.480.9494"),
					Environment:      to.Ptr(armservicefabric.ClusterEnvironmentWindows),
					SupportExpiryUTC: to.Ptr("2018-06-15T23:59:59.9999999"),
				},
			}},
	}
	if !reflect.DeepEqual(exampleRes, res.ClusterCodeVersionsListResult) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ClusterCodeVersionsListResult)
		t.Fatalf("Mock response is not equal to example response for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ClusterVersionsGet_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestClusterVersions_GetByEnvironment(t *testing.T) {
	// From example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ClusterVersionsGetByEnvironment_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get cluster version by environment"},
	})
	client, err := armservicefabric.NewClusterVersionsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.GetByEnvironment(ctx,
		"eastus",
		armservicefabric.ClusterVersionsEnvironmentWindows,
		"6.1.480.9494",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ClusterVersionsGetByEnvironment_example.json: %v", err)
	}
	// Response check
	exampleRes := armservicefabric.ClusterCodeVersionsListResult{
		Value: []*armservicefabric.ClusterCodeVersionsResult{
			{
				Name: to.Ptr("6.1.480.9494"),
				Type: to.Ptr("Microsoft.ServiceFabric/locations/environments/clusterVersions"),
				ID:   to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.ServiceFabric/locations/eastus/environments/Windows/clusterVersions/6.1.480.9494"),
				Properties: &armservicefabric.ClusterVersionDetails{
					CodeVersion:      to.Ptr("6.1.480.9494"),
					Environment:      to.Ptr(armservicefabric.ClusterEnvironmentWindows),
					SupportExpiryUTC: to.Ptr("2018-06-15T23:59:59.9999999"),
				},
			}},
	}
	if !reflect.DeepEqual(exampleRes, res.ClusterCodeVersionsListResult) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ClusterCodeVersionsListResult)
		t.Fatalf("Mock response is not equal to example response for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ClusterVersionsGetByEnvironment_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestClusterVersions_List(t *testing.T) {
	// From example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ClusterVersionsList_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List cluster versions"},
	})
	client, err := armservicefabric.NewClusterVersionsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.List(ctx,
		"eastus",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ClusterVersionsList_example.json: %v", err)
	}
	// Response check
	exampleRes := armservicefabric.ClusterCodeVersionsListResult{
		Value: []*armservicefabric.ClusterCodeVersionsResult{
			{
				Name: to.Ptr("6.1.480.9494"),
				Type: to.Ptr("Microsoft.ServiceFabric/locations/environments/clusterVersions"),
				ID:   to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.ServiceFabric/locations/eastus/environments/Windows/clusterVersions/6.1.480.9494"),
				Properties: &armservicefabric.ClusterVersionDetails{
					CodeVersion:      to.Ptr("6.1.480.9494"),
					Environment:      to.Ptr(armservicefabric.ClusterEnvironmentWindows),
					SupportExpiryUTC: to.Ptr("2018-06-15T23:59:59.9999999"),
				},
			},
			{
				Name: to.Ptr("6.1.187.1"),
				Type: to.Ptr("Microsoft.ServiceFabric/locations/environments/clusterVersions"),
				ID:   to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.ServiceFabric/locations/eastus/environments/Linux/clusterVersions/6.1.187.1"),
				Properties: &armservicefabric.ClusterVersionDetails{
					CodeVersion:      to.Ptr("6.1.187.1"),
					Environment:      to.Ptr(armservicefabric.ClusterEnvironmentLinux),
					SupportExpiryUTC: to.Ptr("2018-06-15T23:59:59.9999999"),
				},
			}},
	}
	if !reflect.DeepEqual(exampleRes, res.ClusterCodeVersionsListResult) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ClusterCodeVersionsListResult)
		t.Fatalf("Mock response is not equal to example response for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ClusterVersionsList_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestClusterVersions_ListByEnvironment(t *testing.T) {
	// From example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ClusterVersionsListByEnvironment.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"List cluster versions by environment"},
	})
	client, err := armservicefabric.NewClusterVersionsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.ListByEnvironment(ctx,
		"eastus",
		armservicefabric.ClusterVersionsEnvironmentWindows,
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ClusterVersionsListByEnvironment.json: %v", err)
	}
	// Response check
	exampleRes := armservicefabric.ClusterCodeVersionsListResult{
		Value: []*armservicefabric.ClusterCodeVersionsResult{
			{
				Name: to.Ptr("6.1.480.9494"),
				Type: to.Ptr("Microsoft.ServiceFabric/locations/environments/clusterVersions"),
				ID:   to.Ptr("subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.ServiceFabric/locations/eastus/environments/Windows/clusterVersions/6.1.480.9494"),
				Properties: &armservicefabric.ClusterVersionDetails{
					CodeVersion:      to.Ptr("6.1.480.9494"),
					Environment:      to.Ptr(armservicefabric.ClusterEnvironmentWindows),
					SupportExpiryUTC: to.Ptr("2018-06-15T23:59:59.9999999"),
				},
			}},
	}
	if !reflect.DeepEqual(exampleRes, res.ClusterCodeVersionsListResult) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ClusterCodeVersionsListResult)
		t.Fatalf("Mock response is not equal to example response for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ClusterVersionsListByEnvironment.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestOperations_List(t *testing.T) {
	// From example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ListOperations.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"ListOperations"},
	})
	client, err := armservicefabric.NewOperationsClient(cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := client.NewListPager(nil)
	for pager.More() {
		nextResult, err := pager.NextPage(ctx)
		if err != nil {
			t.Fatalf("Failed to advance page for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ListOperations.json: %v", err)
			break
		}
		// Response check
		pagerExampleRes := armservicefabric.OperationListResult{
			Value: []*armservicefabric.OperationResult{
				{
					Name: to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaa"),
					Display: &armservicefabric.AvailableOperationDisplay{
						Description: to.Ptr("aaaaaaaaaaaaaaa"),
						Operation:   to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
						Provider:    to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
						Resource:    to.Ptr("aaaaaaaaaaaaaaaaaa"),
					},
					IsDataAction: to.Ptr(true),
					Origin:       to.Ptr("aaaaaaaaaaaaaa"),
				}},
		}
		if !reflect.DeepEqual(pagerExampleRes, nextResult.OperationListResult) {
			exampleResJson, _ := json.Marshal(pagerExampleRes)
			mockResJson, _ := json.Marshal(nextResult.OperationListResult)
			t.Fatalf("Mock response is not equal to example response for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ListOperations.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
		}
	}
}

func TestApplicationTypes_Get(t *testing.T) {
	// From example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ApplicationTypeNameGetOperation_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an application type"},
	})
	client, err := armservicefabric.NewApplicationTypesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Get(ctx,
		"resRg",
		"myCluster",
		"myAppType",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ApplicationTypeNameGetOperation_example.json: %v", err)
	}
	// Response check
	exampleRes := armservicefabric.ApplicationTypeResource{
		Name:     to.Ptr("myCluster"),
		Type:     to.Ptr("applicationTypes"),
		Etag:     to.Ptr("W/\"636462502174844831\""),
		ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.ServiceFabric/clusters/myCluster/applicationTypes/myAppType"),
		Location: to.Ptr("eastus"),
		Tags:     map[string]*string{},
		Properties: &armservicefabric.ApplicationTypeResourceProperties{
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.ApplicationTypeResource) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ApplicationTypeResource)
		t.Fatalf("Mock response is not equal to example response for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ApplicationTypeNameGetOperation_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestApplicationTypes_CreateOrUpdate(t *testing.T) {
	// From example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ApplicationTypeNamePutOperation_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Put an application type"},
	})
	client, err := armservicefabric.NewApplicationTypesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.CreateOrUpdate(ctx,
		"resRg",
		"myCluster",
		"myAppType",
		armservicefabric.ApplicationTypeResource{
			Tags: map[string]*string{},
		},
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ApplicationTypeNamePutOperation_example.json: %v", err)
	}
	// Response check
	exampleRes := armservicefabric.ApplicationTypeResource{
		Name:     to.Ptr("myCluster"),
		Type:     to.Ptr("applicationTypes"),
		Etag:     to.Ptr("W/\"636462502174844831\""),
		ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.ServiceFabric/clusters/myCluster/applicationTypes/myAppType"),
		Location: to.Ptr("eastus"),
		Tags:     map[string]*string{},
		Properties: &armservicefabric.ApplicationTypeResourceProperties{
			ProvisioningState: to.Ptr("Succeeded"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.ApplicationTypeResource) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ApplicationTypeResource)
		t.Fatalf("Mock response is not equal to example response for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ApplicationTypeNamePutOperation_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestApplicationTypes_Delete(t *testing.T) {
	// From example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ApplicationTypeNameDeleteOperation_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete an application type"},
	})
	client, err := armservicefabric.NewApplicationTypesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginDelete(ctx,
		"resRg",
		"myCluster",
		"myAppType",
		&armservicefabric.ApplicationTypesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ApplicationTypeNameDeleteOperation_example.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ApplicationTypeNameDeleteOperation_example.json: %v", err)
	}
}

func TestApplicationTypes_List(t *testing.T) {
	// From example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ApplicationTypeNameListOperation_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a list of application type name resources"},
	})
	client, err := armservicefabric.NewApplicationTypesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.List(ctx,
		"resRg",
		"myCluster",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ApplicationTypeNameListOperation_example.json: %v", err)
	}
	// Response check
	exampleRes := armservicefabric.ApplicationTypeResourceList{
		Value: []*armservicefabric.ApplicationTypeResource{
			{
				Name:     to.Ptr("myCluster"),
				Type:     to.Ptr("applicationTypes"),
				Etag:     to.Ptr("W/\"636462502174844831\""),
				ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.ServiceFabric/clusters/myCluster/applicationTypes/myAppType"),
				Location: to.Ptr("eastus"),
				Tags:     map[string]*string{},
				Properties: &armservicefabric.ApplicationTypeResourceProperties{
					ProvisioningState: to.Ptr("Succeeded"),
				},
			}},
	}
	if !reflect.DeepEqual(exampleRes, res.ApplicationTypeResourceList) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ApplicationTypeResourceList)
		t.Fatalf("Mock response is not equal to example response for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ApplicationTypeNameListOperation_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestApplicationTypeVersions_Get(t *testing.T) {
	// From example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ApplicationTypeVersionGetOperation_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an application type version"},
	})
	client, err := armservicefabric.NewApplicationTypeVersionsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Get(ctx,
		"resRg",
		"myCluster",
		"myAppType",
		"1.0",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ApplicationTypeVersionGetOperation_example.json: %v", err)
	}
	// Response check
	exampleRes := armservicefabric.ApplicationTypeVersionResource{
		Name:     to.Ptr("myCluster"),
		Type:     to.Ptr("versions"),
		Etag:     to.Ptr("W/\"636462502176040417\""),
		ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.ServiceFabric/clusters/myCluster/applicationTypes/myAppType/versions/1.0"),
		Location: to.Ptr("eastus"),
		Tags:     map[string]*string{},
		Properties: &armservicefabric.ApplicationTypeVersionResourceProperties{
			AppPackageURL:        to.Ptr("http://fakelink.test.com/MyAppType"),
			DefaultParameterList: map[string]*string{},
			ProvisioningState:    to.Ptr("Succeeded"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.ApplicationTypeVersionResource) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ApplicationTypeVersionResource)
		t.Fatalf("Mock response is not equal to example response for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ApplicationTypeVersionGetOperation_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestApplicationTypeVersions_CreateOrUpdate(t *testing.T) {
	// From example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ApplicationTypeVersionPutOperation_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Put an application type version"},
	})
	client, err := armservicefabric.NewApplicationTypeVersionsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resRg",
		"myCluster",
		"myAppType",
		"1.0",
		armservicefabric.ApplicationTypeVersionResource{
			Tags: map[string]*string{},
			Properties: &armservicefabric.ApplicationTypeVersionResourceProperties{
				AppPackageURL: to.Ptr("http://fakelink.test.com/MyAppType"),
			},
		},
		&armservicefabric.ApplicationTypeVersionsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ApplicationTypeVersionPutOperation_example.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ApplicationTypeVersionPutOperation_example.json: %v", err)
	}
}

func TestApplicationTypeVersions_Delete(t *testing.T) {
	// From example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ApplicationTypeVersionDeleteOperation_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete an application type version"},
	})
	client, err := armservicefabric.NewApplicationTypeVersionsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginDelete(ctx,
		"resRg",
		"myCluster",
		"myAppType",
		"1.0",
		&armservicefabric.ApplicationTypeVersionsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ApplicationTypeVersionDeleteOperation_example.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ApplicationTypeVersionDeleteOperation_example.json: %v", err)
	}
}

func TestApplicationTypeVersions_List(t *testing.T) {
	// From example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ApplicationTypeVersionListOperation_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a list of application type version resources"},
	})
	client, err := armservicefabric.NewApplicationTypeVersionsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.List(ctx,
		"resRg",
		"myCluster",
		"myAppType",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ApplicationTypeVersionListOperation_example.json: %v", err)
	}
	// Response check
	exampleRes := armservicefabric.ApplicationTypeVersionResourceList{
		Value: []*armservicefabric.ApplicationTypeVersionResource{
			{
				Name:     to.Ptr("myCluster"),
				Type:     to.Ptr("versions"),
				Etag:     to.Ptr("W/\"636462502176040417\""),
				ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.ServiceFabric/clusters/myCluster/applicationTypes/myAppType/versions/1.0"),
				Location: to.Ptr("eastus"),
				Tags:     map[string]*string{},
				Properties: &armservicefabric.ApplicationTypeVersionResourceProperties{
					AppPackageURL:        to.Ptr("http://fakelink.test.com/MyAppType"),
					DefaultParameterList: map[string]*string{},
					ProvisioningState:    to.Ptr("Succeeded"),
				},
			}},
	}
	if !reflect.DeepEqual(exampleRes, res.ApplicationTypeVersionResourceList) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ApplicationTypeVersionResourceList)
		t.Fatalf("Mock response is not equal to example response for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ApplicationTypeVersionListOperation_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestApplications_Get(t *testing.T) {
	// From example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ApplicationGetOperation_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get an application"},
	})
	client, err := armservicefabric.NewApplicationsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Get(ctx,
		"resRg",
		"myCluster",
		"myApp",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ApplicationGetOperation_example.json: %v", err)
	}
	// Response check
	exampleRes := armservicefabric.ApplicationResource{
		Name:     to.Ptr("myCluster"),
		Type:     to.Ptr("applications"),
		Etag:     to.Ptr("W/\"636462502180261859\""),
		ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.ServiceFabric/clusters/myCluster/applications/myApp"),
		Location: to.Ptr("eastus"),
		Tags:     map[string]*string{},
		Properties: &armservicefabric.ApplicationResourceProperties{
			MaximumNodes: to.Ptr[int64](3),
			Metrics: []*armservicefabric.ApplicationMetricDescription{
				{
					Name:                     to.Ptr("metric1"),
					MaximumCapacity:          to.Ptr[int64](3),
					ReservationCapacity:      to.Ptr[int64](1),
					TotalApplicationCapacity: to.Ptr[int64](5),
				}},
			MinimumNodes: to.Ptr[int64](1),
			Parameters: map[string]*string{
				"param1": to.Ptr("value1"),
			},
			RemoveApplicationCapacity: to.Ptr(false),
			TypeVersion:               to.Ptr("1.0"),
			UpgradePolicy: &armservicefabric.ApplicationUpgradePolicy{
				ApplicationHealthPolicy: &armservicefabric.ArmApplicationHealthPolicy{
					ConsiderWarningAsError: to.Ptr(true),
					DefaultServiceTypeHealthPolicy: &armservicefabric.ArmServiceTypeHealthPolicy{
						MaxPercentUnhealthyPartitionsPerService: to.Ptr[int32](0),
						MaxPercentUnhealthyReplicasPerPartition: to.Ptr[int32](0),
						MaxPercentUnhealthyServices:             to.Ptr[int32](0),
					},
					MaxPercentUnhealthyDeployedApplications: to.Ptr[int32](0),
				},
				ForceRestart: to.Ptr(false),
				RollingUpgradeMonitoringPolicy: &armservicefabric.ArmRollingUpgradeMonitoringPolicy{
					FailureAction:             to.Ptr(armservicefabric.ArmUpgradeFailureActionRollback),
					HealthCheckRetryTimeout:   to.Ptr("00:10:00"),
					HealthCheckStableDuration: to.Ptr("00:05:00"),
					HealthCheckWaitDuration:   to.Ptr("00:02:00"),
					UpgradeDomainTimeout:      to.Ptr("1.06:00:00"),
					UpgradeTimeout:            to.Ptr("01:00:00"),
				},
				UpgradeMode:                   to.Ptr(armservicefabric.RollingUpgradeModeMonitored),
				UpgradeReplicaSetCheckTimeout: to.Ptr("01:00:00"),
			},
			ProvisioningState: to.Ptr("Succeeded"),
			TypeName:          to.Ptr("myAppType"),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.ApplicationResource) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ApplicationResource)
		t.Fatalf("Mock response is not equal to example response for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ApplicationGetOperation_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestApplications_CreateOrUpdate(t *testing.T) {
	// From example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ApplicationPutOperation_example_max.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Put an application with maximum parameters"},
	})
	client, err := armservicefabric.NewApplicationsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resRg",
		"myCluster",
		"myApp",
		armservicefabric.ApplicationResource{
			Tags: map[string]*string{},
			Properties: &armservicefabric.ApplicationResourceProperties{
				MaximumNodes: to.Ptr[int64](3),
				Metrics: []*armservicefabric.ApplicationMetricDescription{
					{
						Name:                     to.Ptr("metric1"),
						MaximumCapacity:          to.Ptr[int64](3),
						ReservationCapacity:      to.Ptr[int64](1),
						TotalApplicationCapacity: to.Ptr[int64](5),
					}},
				MinimumNodes: to.Ptr[int64](1),
				Parameters: map[string]*string{
					"param1": to.Ptr("value1"),
				},
				RemoveApplicationCapacity: to.Ptr(false),
				TypeVersion:               to.Ptr("1.0"),
				UpgradePolicy: &armservicefabric.ApplicationUpgradePolicy{
					ApplicationHealthPolicy: &armservicefabric.ArmApplicationHealthPolicy{
						ConsiderWarningAsError: to.Ptr(true),
						DefaultServiceTypeHealthPolicy: &armservicefabric.ArmServiceTypeHealthPolicy{
							MaxPercentUnhealthyPartitionsPerService: to.Ptr[int32](0),
							MaxPercentUnhealthyReplicasPerPartition: to.Ptr[int32](0),
							MaxPercentUnhealthyServices:             to.Ptr[int32](0),
						},
						MaxPercentUnhealthyDeployedApplications: to.Ptr[int32](0),
					},
					ForceRestart: to.Ptr(false),
					RollingUpgradeMonitoringPolicy: &armservicefabric.ArmRollingUpgradeMonitoringPolicy{
						FailureAction:             to.Ptr(armservicefabric.ArmUpgradeFailureActionRollback),
						HealthCheckRetryTimeout:   to.Ptr("00:10:00"),
						HealthCheckStableDuration: to.Ptr("00:05:00"),
						HealthCheckWaitDuration:   to.Ptr("00:02:00"),
						UpgradeDomainTimeout:      to.Ptr("1.06:00:00"),
						UpgradeTimeout:            to.Ptr("01:00:00"),
					},
					UpgradeMode:                   to.Ptr(armservicefabric.RollingUpgradeModeMonitored),
					UpgradeReplicaSetCheckTimeout: to.Ptr("01:00:00"),
				},
				TypeName: to.Ptr("myAppType"),
			},
		},
		&armservicefabric.ApplicationsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ApplicationPutOperation_example_max.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ApplicationPutOperation_example_max.json: %v", err)
	}

	// From example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ApplicationPutOperation_example_min.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Put an application with minimum parameters"},
	})
	client, err = armservicefabric.NewApplicationsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"resRg",
		"myCluster",
		"myApp",
		armservicefabric.ApplicationResource{
			Location: to.Ptr("eastus"),
			Tags:     map[string]*string{},
			Properties: &armservicefabric.ApplicationResourceProperties{
				RemoveApplicationCapacity: to.Ptr(false),
				TypeVersion:               to.Ptr("1.0"),
				TypeName:                  to.Ptr("myAppType"),
			},
		},
		&armservicefabric.ApplicationsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ApplicationPutOperation_example_min.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ApplicationPutOperation_example_min.json: %v", err)
	}

	// From example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ApplicationPutOperation_recreate_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Put an application with recreate option"},
	})
	client, err = armservicefabric.NewApplicationsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"resRg",
		"myCluster",
		"myApp",
		armservicefabric.ApplicationResource{
			Tags: map[string]*string{},
			Properties: &armservicefabric.ApplicationResourceProperties{
				Parameters: map[string]*string{
					"param1": to.Ptr("value1"),
				},
				TypeVersion: to.Ptr("1.0"),
				UpgradePolicy: &armservicefabric.ApplicationUpgradePolicy{
					RecreateApplication: to.Ptr(true),
				},
				TypeName: to.Ptr("myAppType"),
			},
		},
		&armservicefabric.ApplicationsClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ApplicationPutOperation_recreate_example.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ApplicationPutOperation_recreate_example.json: %v", err)
	}
}

func TestApplications_Update(t *testing.T) {
	// From example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ApplicationPatchOperation_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Patch an application"},
	})
	client, err := armservicefabric.NewApplicationsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginUpdate(ctx,
		"resRg",
		"myCluster",
		"myApp",
		armservicefabric.ApplicationResourceUpdate{
			Location: to.Ptr("eastus"),
			Tags:     map[string]*string{},
			Properties: &armservicefabric.ApplicationResourceUpdateProperties{
				Metrics: []*armservicefabric.ApplicationMetricDescription{
					{
						Name:                     to.Ptr("metric1"),
						MaximumCapacity:          to.Ptr[int64](3),
						ReservationCapacity:      to.Ptr[int64](1),
						TotalApplicationCapacity: to.Ptr[int64](5),
					}},
				RemoveApplicationCapacity: to.Ptr(false),
				TypeVersion:               to.Ptr("1.0"),
			},
		},
		&armservicefabric.ApplicationsClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ApplicationPatchOperation_example.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ApplicationPatchOperation_example.json: %v", err)
	}
}

func TestApplications_Delete(t *testing.T) {
	// From example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ApplicationDeleteOperation_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete an application"},
	})
	client, err := armservicefabric.NewApplicationsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginDelete(ctx,
		"resRg",
		"myCluster",
		"myApp",
		&armservicefabric.ApplicationsClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ApplicationDeleteOperation_example.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ApplicationDeleteOperation_example.json: %v", err)
	}
}

func TestApplications_List(t *testing.T) {
	// From example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ApplicationListOperation_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a list of application resources"},
	})
	client, err := armservicefabric.NewApplicationsClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.List(ctx,
		"resRg",
		"myCluster",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ApplicationListOperation_example.json: %v", err)
	}
	// Response check
	exampleRes := armservicefabric.ApplicationResourceList{
		Value: []*armservicefabric.ApplicationResource{
			{
				Name:     to.Ptr("myCluster"),
				Type:     to.Ptr("applications"),
				Etag:     to.Ptr("W/\"636462502180261858\""),
				ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.ServiceFabric/clusters/myCluster/applications/myApp"),
				Location: to.Ptr("eastus"),
				Tags:     map[string]*string{},
				Properties: &armservicefabric.ApplicationResourceProperties{
					Metrics: []*armservicefabric.ApplicationMetricDescription{
						{
							Name:                     to.Ptr("metric1"),
							MaximumCapacity:          to.Ptr[int64](3),
							ReservationCapacity:      to.Ptr[int64](1),
							TotalApplicationCapacity: to.Ptr[int64](5),
						}},
					RemoveApplicationCapacity: to.Ptr(false),
					TypeVersion:               to.Ptr("1.0"),
					ProvisioningState:         to.Ptr("Succeeded"),
					TypeName:                  to.Ptr("myAppType"),
				},
			}},
	}
	if !reflect.DeepEqual(exampleRes, res.ApplicationResourceList) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ApplicationResourceList)
		t.Fatalf("Mock response is not equal to example response for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ApplicationListOperation_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestServices_Get(t *testing.T) {
	// From example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ServiceGetOperation_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a service"},
	})
	client, err := armservicefabric.NewServicesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.Get(ctx,
		"resRg",
		"myCluster",
		"myApp",
		"myService",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ServiceGetOperation_example.json: %v", err)
	}
	// Response check
	exampleRes := armservicefabric.ServiceResource{
		Name:     to.Ptr("myCluster"),
		Type:     to.Ptr("services"),
		Etag:     to.Ptr("W/\"636462502183671258\""),
		ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.ServiceFabric/clusters/myCluster/applications/myApp/services/myService"),
		Location: to.Ptr("eastus"),
		Tags:     map[string]*string{},
		Properties: &armservicefabric.StatelessServiceProperties{
			DefaultMoveCost:      to.Ptr(armservicefabric.MoveCostMedium),
			PlacementConstraints: to.Ptr("NodeType==frontend"),
			ServiceLoadMetrics: []*armservicefabric.ServiceLoadMetricDescription{
				{
					Name:   to.Ptr("metric1"),
					Weight: to.Ptr(armservicefabric.ServiceLoadMetricWeightLow),
				}},
			ServicePlacementPolicies: []armservicefabric.ServicePlacementPolicyDescriptionClassification{},
			PartitionDescription: &armservicefabric.SingletonPartitionSchemeDescription{
				PartitionScheme: to.Ptr(armservicefabric.PartitionSchemeSingleton),
			},
			ProvisioningState:            to.Ptr("Succeeded"),
			ServiceKind:                  to.Ptr(armservicefabric.ServiceKindStateless),
			ServicePackageActivationMode: to.Ptr(armservicefabric.ArmServicePackageActivationModeSharedProcess),
			ServiceTypeName:              to.Ptr("myServiceType"),
			InstanceCount:                to.Ptr[int32](5),
		},
	}
	if !reflect.DeepEqual(exampleRes, res.ServiceResource) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ServiceResource)
		t.Fatalf("Mock response is not equal to example response for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ServiceGetOperation_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

func TestServices_CreateOrUpdate(t *testing.T) {
	// From example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ServicePutOperation_example_max.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Put a service with maximum parameters"},
	})
	client, err := armservicefabric.NewServicesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginCreateOrUpdate(ctx,
		"resRg",
		"myCluster",
		"myApp",
		"myService",
		armservicefabric.ServiceResource{
			Tags: map[string]*string{},
			Properties: &armservicefabric.StatelessServiceProperties{
				CorrelationScheme: []*armservicefabric.ServiceCorrelationDescription{
					{
						Scheme:      to.Ptr(armservicefabric.ServiceCorrelationSchemeAffinity),
						ServiceName: to.Ptr("fabric:/app1/app1~svc1"),
					}},
				DefaultMoveCost:      to.Ptr(armservicefabric.MoveCostMedium),
				PlacementConstraints: to.Ptr("NodeType==frontend"),
				ServiceLoadMetrics: []*armservicefabric.ServiceLoadMetricDescription{
					{
						Name:   to.Ptr("metric1"),
						Weight: to.Ptr(armservicefabric.ServiceLoadMetricWeightLow),
					}},
				ServicePlacementPolicies: []armservicefabric.ServicePlacementPolicyDescriptionClassification{},
				PartitionDescription: &armservicefabric.SingletonPartitionSchemeDescription{
					PartitionScheme: to.Ptr(armservicefabric.PartitionSchemeSingleton),
				},
				ServiceDNSName:               to.Ptr("my.service.dns"),
				ServiceKind:                  to.Ptr(armservicefabric.ServiceKindStateless),
				ServicePackageActivationMode: to.Ptr(armservicefabric.ArmServicePackageActivationModeSharedProcess),
				ServiceTypeName:              to.Ptr("myServiceType"),
				InstanceCount:                to.Ptr[int32](5),
			},
		},
		&armservicefabric.ServicesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ServicePutOperation_example_max.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ServicePutOperation_example_max.json: %v", err)
	}

	// From example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ServicePutOperation_example_min.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Put a service with minimum parameters"},
	})
	client, err = armservicefabric.NewServicesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err = client.BeginCreateOrUpdate(ctx,
		"resRg",
		"myCluster",
		"myApp",
		"myService",
		armservicefabric.ServiceResource{
			Tags: map[string]*string{},
			Properties: &armservicefabric.StatelessServiceProperties{
				PartitionDescription: &armservicefabric.SingletonPartitionSchemeDescription{
					PartitionScheme: to.Ptr(armservicefabric.PartitionSchemeSingleton),
				},
				ServiceKind:     to.Ptr(armservicefabric.ServiceKindStateless),
				ServiceTypeName: to.Ptr("myServiceType"),
				InstanceCount:   to.Ptr[int32](1),
			},
		},
		&armservicefabric.ServicesClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ServicePutOperation_example_min.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ServicePutOperation_example_min.json: %v", err)
	}
}

func TestServices_Update(t *testing.T) {
	// From example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ServicePatchOperation_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Patch a service"},
	})
	client, err := armservicefabric.NewServicesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginUpdate(ctx,
		"resRg",
		"myCluster",
		"myApp",
		"myService",
		armservicefabric.ServiceResourceUpdate{
			Tags: map[string]*string{},
			Properties: &armservicefabric.StatelessServiceUpdateProperties{
				ServiceLoadMetrics: []*armservicefabric.ServiceLoadMetricDescription{
					{
						Name:   to.Ptr("metric1"),
						Weight: to.Ptr(armservicefabric.ServiceLoadMetricWeightLow),
					}},
				ServiceKind: to.Ptr(armservicefabric.ServiceKindStateless),
			},
		},
		&armservicefabric.ServicesClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ServicePatchOperation_example.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ServicePatchOperation_example.json: %v", err)
	}
}

func TestServices_Delete(t *testing.T) {
	// From example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ServiceDeleteOperation_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Delete a service"},
	})
	client, err := armservicefabric.NewServicesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := client.BeginDelete(ctx,
		"resRg",
		"myCluster",
		"myApp",
		"myService",
		&armservicefabric.ServicesClientBeginDeleteOptions{ResumeToken: ""})
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ServiceDeleteOperation_example.json: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		t.Fatalf("Failed to get LRO result for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ServiceDeleteOperation_example.json: %v", err)
	}
}

func TestServices_List(t *testing.T) {
	// From example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ServiceListOperation_example.json
	ctx = runtime.WithHTTPHeader(ctx, map[string][]string{
		"example-id": {"Get a list of service resources"},
	})
	client, err := armservicefabric.NewServicesClient("00000000-0000-0000-0000-000000000000", cred, &options)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := client.List(ctx,
		"resRg",
		"myCluster",
		"myApp",
		nil)
	if err != nil {
		t.Fatalf("Failed to get result for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ServiceListOperation_example.json: %v", err)
	}
	// Response check
	exampleRes := armservicefabric.ServiceResourceList{
		Value: []*armservicefabric.ServiceResource{
			{
				Name:     to.Ptr("myCluster"),
				Type:     to.Ptr("services"),
				Etag:     to.Ptr("W/\"636462502183671257\""),
				ID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.ServiceFabric/clusters/myCluster/applications/myApp/services/myService"),
				Location: to.Ptr("eastus"),
				Tags:     map[string]*string{},
				Properties: &armservicefabric.StatelessServiceProperties{
					ServiceLoadMetrics: []*armservicefabric.ServiceLoadMetricDescription{
						{
							Name:   to.Ptr("metric1"),
							Weight: to.Ptr(armservicefabric.ServiceLoadMetricWeightLow),
						}},
					PartitionDescription: &armservicefabric.SingletonPartitionSchemeDescription{
						PartitionScheme: to.Ptr(armservicefabric.PartitionSchemeSingleton),
					},
					ProvisioningState:            to.Ptr("Succeeded"),
					ServiceKind:                  to.Ptr(armservicefabric.ServiceKindStateless),
					ServicePackageActivationMode: to.Ptr(armservicefabric.ArmServicePackageActivationModeSharedProcess),
					ServiceTypeName:              to.Ptr("myServiceType"),
					InstanceCount:                to.Ptr[int32](1),
				},
			}},
	}
	if !reflect.DeepEqual(exampleRes, res.ServiceResourceList) {
		exampleResJson, _ := json.Marshal(exampleRes)
		mockResJson, _ := json.Marshal(res.ServiceResourceList)
		t.Fatalf("Mock response is not equal to example response for example specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ServiceListOperation_example.json:\nmock response: %s\nexample response: %s", mockResJson, exampleResJson)
	}
}

// TestMain will exec each test
func TestMain(m *testing.M) {
	setUp()
	retCode := m.Run() // exec test and this returns an exit code to pass to os
	tearDown()
	os.Exit(retCode)
}

func getEnv(key, fallback string) string {
	if value, ok := os.LookupEnv(key); ok {
		return value
	}
	return fallback
}

func setUp() {
	ctx = context.Background()
	mockHost = getEnv("AZURE_VIRTUAL_SERVER_HOST", "https://localhost:8443")

	tr := &http.Transport{}
	if err := http2.ConfigureTransport(tr); err != nil {
		fmt.Printf("Failed to configure http2 transport: %v", err)
	}
	tr.TLSClientConfig.InsecureSkipVerify = true
	client := &http.Client{Transport: tr}

	cred = &MockCredential{}

	options = arm.ClientOptions{
		ClientOptions: policy.ClientOptions{
			Logging: policy.LogOptions{
				IncludeBody: true,
			},
			Transport: client,
			Cloud: cloud.Configuration{
				Services: map[cloud.ServiceName]cloud.ServiceConfiguration{
					cloud.ResourceManager: {
						Audience: mockHost,
						Endpoint: mockHost,
					},
				},
			},
		},
	}
}

func tearDown() {

}

type MockCredential struct {
}

func (c *MockCredential) GetToken(ctx context.Context, opts policy.TokenRequestOptions) (*azcore.AccessToken, error) {
	return &azcore.AccessToken{Token: "MockToken", ExpiresOn: time.Now().Add(time.Hour * 24).UTC()}, nil
}
